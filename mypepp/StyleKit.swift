//
//  StyleKit.swift
//
//  Created on Aug 8, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawPeppAppSignInPage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// lars.gadeby@whatwedo
        let larsgadebywhatwedo = NSMutableAttributedString(string: "lars.gadeby@whatwedo.se")
        larsgadebywhatwedo.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            larsgadebywhatwedo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: larsgadebywhatwedo.length))
        }
        context.saveGState()
        larsgadebywhatwedo.draw(at: CGPoint(x: 54, y: 291))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 54, y: 380)
            
            /// Oval 3
            let oval3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            UIColor.black.setFill()
            oval3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy
            let oval3Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 16, y: 0)
            UIColor.black.setFill()
            oval3Copy.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 2
            let oval3Copy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 32, y: 0)
            UIColor.black.setFill()
            oval3Copy2.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 3
            let oval3Copy3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 48, y: 0)
            UIColor.black.setFill()
            oval3Copy3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 4
            let oval3Copy4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 64, y: 0)
            UIColor.black.setFill()
            oval3Copy4.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 5
            let oval3Copy5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 80, y: 0)
            UIColor.black.setFill()
            oval3Copy5.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 6
            let oval3Copy6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 11, height: 11))
            context.saveGState()
            context.translateBy(x: 95, y: 0)
            UIColor.black.setFill()
            oval3Copy6.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// PEPP
        let pEPP = NSMutableAttributedString(string: "PEPP")
        pEPP.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 110)!, range: NSRange(location: 0, length: pEPP.length))
        pEPP.addAttribute(.kern, value: -1.7, range: NSRange(location: 0, length: pEPP.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            pEPP.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: pEPP.length))
        }
        pEPP.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pEPP.length))
        context.saveGState()
        pEPP.draw(at: CGPoint(x: 58, y: 77))
        context.restoreGState()
        
        /// FIND A TRAINER
        let fINDATRAINER = NSMutableAttributedString(string: "FIND A TRAINER")
        fINDATRAINER.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 23)!, range: NSRange(location: 0, length: fINDATRAINER.length))
        fINDATRAINER.addAttribute(.kern, value: -0.86, range: NSRange(location: 0, length: 13))
        fINDATRAINER.addAttribute(.kern, value: -1.96, range: NSRange(location: 13, length: 1))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            fINDATRAINER.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fINDATRAINER.length))
        }
        fINDATRAINER.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: fINDATRAINER.length))
        context.saveGState()
        fINDATRAINER.draw(at: CGPoint(x: 101, y: 208))
        context.restoreGState()
        
        /// Or Sign Up with
        let orSignUpWith = NSMutableAttributedString(string: "Or Sign Up with")
        orSignUpWith.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: orSignUpWith.length))
        orSignUpWith.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: orSignUpWith.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            orSignUpWith.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: orSignUpWith.length))
        }
        orSignUpWith.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: orSignUpWith.length))
        context.saveGState()
        orSignUpWith.draw(at: CGPoint(x: 125, y: 510))
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle4 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 559)
        UIColor(hue: 0.613, saturation: 0.612, brightness: 0.596, alpha: 1).setFill()
        rectangle4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy
        let rectangle4Copy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 628)
        UIColor.white.setFill()
        rectangle4Copy.fill()
        context.saveGState()
        rectangle4Copy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle4Copy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.78, alpha: 1).setStroke()
        rectangle4Copy.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 2
        let rectangle4Copy2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 293, height: 50), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 41, y: 697)
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        rectangle4Copy2.fill()
        context.restoreGState()
        
        /// icn/socialmedia/facebook
        // Warning: New symbols are not supported.
        
        /// Facebook
        let facebook = NSMutableAttributedString(string: "Facebook")
        facebook.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: facebook.length))
        facebook.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: 7))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            facebook.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: facebook.length))
        }
        facebook.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: facebook.length))
        context.saveGState()
        facebook.draw(at: CGPoint(x: 151, y: 572))
        context.restoreGState()
        
        /// Google
        let google = NSMutableAttributedString(string: "Google")
        google.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: google.length))
        google.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: google.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            google.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: google.length))
        }
        google.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: google.length))
        context.saveGState()
        google.draw(at: CGPoint(x: 162, y: 641))
        context.restoreGState()
        
        /// E-mail
        let email = NSMutableAttributedString(string: "E-mail")
        email.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 18)!, range: NSRange(location: 0, length: email.length))
        email.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: email.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            email.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: email.length))
        }
        email.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: email.length))
        context.saveGState()
        email.draw(at: CGPoint(x: 166, y: 710))
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 67, y: 638)
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 13)
                
                /// Clip 2
                let clip2 = UIBezierPath()
                clip2.move(to: CGPoint.zero)
                clip2.addLine(to: CGPoint(x: 0, y: 5.74))
                clip2.addLine(to: CGPoint(x: 8.35, y: 5.74))
                clip2.addCurve(to: CGPoint(x: 5.26, y: 10.22), controlPoint1: CGPoint(x: 7.99, y: 7.59), controlPoint2: CGPoint(x: 6.9, y: 9.16))
                clip2.addLine(to: CGPoint(x: 5.26, y: 13.94))
                clip2.addLine(to: CGPoint(x: 10.27, y: 13.94))
                clip2.addCurve(to: CGPoint(x: 14.9, y: 3.03), controlPoint1: CGPoint(x: 13.21, y: 11.36), controlPoint2: CGPoint(x: 14.9, y: 7.55))
                clip2.addCurve(to: CGPoint(x: 14.62, y: 0), controlPoint1: CGPoint(x: 14.9, y: 1.98), controlPoint2: CGPoint(x: 14.8, y: 0.97))
                clip2.addLine(to: CGPoint.zero)
                clip2.close()
                context.saveGState()
                context.translateBy(x: 0.08, y: 0.06)
                context.restoreGState()
                
                
                /// Clip 2 (Outline Mask)
                context.saveGState()
                clip2.apply(CGAffineTransform(translationX: 0.08, y: 0.06))
                clip2.addClip()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 0, y: 30.42))
                fill1.addLine(to: CGPoint(x: 32.15, y: 30.42))
                fill1.addLine(to: CGPoint(x: 32.15, y: 0))
                fill1.addLine(to: CGPoint.zero)
                fill1.addLine(to: CGPoint(x: 0, y: 30.42))
                fill1.close()
                context.saveGState()
                context.translateBy(x: -8.55, y: -8.18)
                fill1.usesEvenOddFillRule = true
                UIColor(hue: 0.603, saturation: 0.743, brightness: 0.945, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 18)
                
                /// Clip 5
                let clip5 = UIBezierPath()
                clip5.move(to: CGPoint.zero)
                clip5.addLine(to: CGPoint(x: 0, y: 4.11))
                clip5.addCurve(to: CGPoint(x: 13.73, y: 12.84), controlPoint1: CGPoint(x: 2.53, y: 9.29), controlPoint2: CGPoint(x: 7.73, y: 12.84))
                clip5.addCurve(to: CGPoint(x: 23.9, y: 9), controlPoint1: CGPoint(x: 17.88, y: 12.84), controlPoint2: CGPoint(x: 21.36, y: 11.42))
                clip5.addLine(to: CGPoint(x: 18.94, y: 5.02))
                clip5.addCurve(to: CGPoint(x: 13.73, y: 6.53), controlPoint1: CGPoint(x: 17.56, y: 5.97), controlPoint2: CGPoint(x: 15.8, y: 6.53))
                clip5.addCurve(to: CGPoint(x: 5.13, y: 0), controlPoint1: CGPoint(x: 9.73, y: 6.53), controlPoint2: CGPoint(x: 6.34, y: 3.75))
                clip5.addLine(to: CGPoint.zero)
                clip5.close()
                context.saveGState()
                context.translateBy(x: 0.07, y: 0.08)
                context.restoreGState()
                
                
                /// Clip 5 (Outline Mask)
                context.saveGState()
                clip5.apply(CGAffineTransform(translationX: 0.07, y: 0.08))
                clip5.addClip()
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint(x: 0, y: 30.45))
                fill4.addLine(to: CGPoint(x: 40.98, y: 30.45))
                fill4.addLine(to: CGPoint(x: 40.98, y: 0))
                fill4.addLine(to: CGPoint.zero)
                fill4.addLine(to: CGPoint(x: 0, y: 30.45))
                fill4.close()
                context.saveGState()
                context.translateBy(x: -8.47, y: -8.72)
                fill4.usesEvenOddFillRule = true
                UIColor(hue: 0.38, saturation: 0.701, brightness: 0.655, alpha: 1).setFill()
                fill4.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 5 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 9
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 8)
                
                /// Clip 8
                let clip8 = UIBezierPath()
                clip8.move(to: CGPoint(x: 1.66, y: 0))
                clip8.addCurve(to: CGPoint(x: 0, y: 6.95), controlPoint1: CGPoint(x: 0.6, y: 2.09), controlPoint2: CGPoint(x: 0, y: 4.45))
                clip8.addCurve(to: CGPoint(x: 1.66, y: 13.9), controlPoint1: CGPoint(x: 0, y: 9.45), controlPoint2: CGPoint(x: 0.6, y: 11.81))
                clip8.addLine(to: CGPoint(x: 6.86, y: 9.89))
                clip8.addCurve(to: CGPoint(x: 6.37, y: 6.95), controlPoint1: CGPoint(x: 6.55, y: 8.96), controlPoint2: CGPoint(x: 6.37, y: 7.97))
                clip8.addCurve(to: CGPoint(x: 6.86, y: 4.01), controlPoint1: CGPoint(x: 6.37, y: 5.93), controlPoint2: CGPoint(x: 6.55, y: 4.94))
                clip8.addLine(to: CGPoint(x: 6.86, y: 0))
                clip8.addLine(to: CGPoint(x: 1.66, y: 0))
                clip8.close()
                context.saveGState()
                context.translateBy(x: 0.08, y: 0.01)
                context.restoreGState()
                
                
                /// Clip 8 (Outline Mask)
                context.saveGState()
                clip8.apply(CGAffineTransform(translationX: 0.08, y: 0.01))
                clip8.addClip()
                
                /// Fill 7
                let fill7 = UIBezierPath()
                fill7.move(to: CGPoint(x: 0, y: 31.1))
                fill7.addLine(to: CGPoint(x: 24.17, y: 31.1))
                fill7.addLine(to: CGPoint(x: 24.17, y: 0))
                fill7.addLine(to: CGPoint.zero)
                fill7.addLine(to: CGPoint(x: 0, y: 31.1))
                fill7.close()
                context.saveGState()
                context.translateBy(x: -8.57, y: -8.59)
                fill7.usesEvenOddFillRule = true
                UIColor(hue: 0.125, saturation: 1, brightness: 0.976, alpha: 1).setFill()
                fill7.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 8 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            /// Group 12
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 0)
                
                /// Clip 11
                let clip11 = UIBezierPath()
                clip11.move(to: CGPoint(x: 0, y: 8.79))
                clip11.addLine(to: CGPoint(x: 5.1, y: 12.93))
                clip11.addCurve(to: CGPoint(x: 13.64, y: 6.35), controlPoint1: CGPoint(x: 6.3, y: 9.15), controlPoint2: CGPoint(x: 9.66, y: 6.35))
                clip11.addCurve(to: CGPoint(x: 19.47, y: 8.73), controlPoint1: CGPoint(x: 15.88, y: 6.35), controlPoint2: CGPoint(x: 17.89, y: 7.15))
                clip11.addLine(to: CGPoint(x: 23.84, y: 4.16))
                clip11.addCurve(to: CGPoint(x: 13.64, y: 0), controlPoint1: CGPoint(x: 21.2, y: 1.58), controlPoint2: CGPoint(x: 17.75, y: 0))
                clip11.addCurve(to: CGPoint(x: 0, y: 8.79), controlPoint1: CGPoint(x: 7.67, y: 0), controlPoint2: CGPoint(x: 2.51, y: 3.58))
                clip11.close()
                context.saveGState()
                context.translateBy(x: 0.07, y: 0.01)
                context.restoreGState()
                
                
                /// Clip 11 (Outline Mask)
                context.saveGState()
                clip11.apply(CGAffineTransform(translationX: 0.07, y: 0.01))
                clip11.addClip()
                
                /// Fill 10
                let fill10 = UIBezierPath()
                fill10.move(to: CGPoint(x: 0, y: 30.66))
                fill10.addLine(to: CGPoint(x: 40.8, y: 30.66))
                fill10.addLine(to: CGPoint(x: 40.8, y: 0))
                fill10.addLine(to: CGPoint.zero)
                fill10.addLine(to: CGPoint(x: 0, y: 30.66))
                fill10.close()
                context.saveGState()
                context.translateBy(x: -8.41, y: -8.86)
                fill10.usesEvenOddFillRule = true
                UIColor(hue: 0.013, saturation: 0.779, brightness: 0.906, alpha: 1).setFill()
                fill10.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 11 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawTrainerCalender(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// calender/week
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawTrainerProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Pick type of trainin
        let pickTypeOfTrainin = NSMutableAttributedString(string: "Pick type of training")
        pickTypeOfTrainin.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickTypeOfTrainin.length))
        pickTypeOfTrainin.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickTypeOfTrainin.length))
        context.saveGState()
        pickTypeOfTrainin.draw(in: CGRect(x: 30, y: 531, width: 158, height: 20))
        context.restoreGState()
        
        /// icn_crossfit
        // Warning: New symbols are not supported.
        
        /// icn_gym
        // Warning: New symbols are not supported.
        
        /// icn_yoga copy
        // Warning: New symbols are not supported.
        
        /// How many people?
        let howManyPeople = NSMutableAttributedString(string: "How many people?")
        howManyPeople.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: howManyPeople.length))
        howManyPeople.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: howManyPeople.length))
        context.saveGState()
        howManyPeople.draw(in: CGRect(x: 30, y: 610, width: 158, height: 20))
        context.restoreGState()
        
        /// profile_map-view copy
        // Warning: New symbols are not supported.
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 30, y: 642)
            
            /// btn_workoutgroups_selectable copy 3
            // Warning: New symbols are not supported.
            
            
            /// btn_workoutgroups_selectable copy 4
            // Warning: New symbols are not supported.
            
            
            /// btn_workoutgroups_selectable copy 5
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 30, y: 429)
            
            /// Pick Date
            let pickDate = NSMutableAttributedString(string: "Pick Date")
            pickDate.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickDate.length))
            pickDate.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickDate.length))
            context.saveGState()
            pickDate.draw(in: CGRect(x: 0, y: 0, width: 96, height: 20))
            context.restoreGState()
            
            
            /// Pick Time
            let pickTime = NSMutableAttributedString(string: "Pick Time")
            pickTime.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickTime.length))
            pickTime.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickTime.length))
            context.saveGState()
            pickTime.draw(in: CGRect(x: 0, y: 53, width: 96, height: 20))
            context.restoreGState()
            
            
            /// ico_swipe_up
            // Warning: New symbols are not supported.
            
            
            /// ico_swipe_up copy
            // Warning: New symbols are not supported.
            
            
            /// Path 3
            let path3 = UIBezierPath()
            path3.move(to: CGPoint(x: 0, y: 1))
            path3.addLine(to: CGPoint(x: 300.99, y: 1))
            context.saveGState()
            context.translateBy(x: -0, y: 22)
            path3.lineWidth = 0.5
            UIColor(white: 0.21, alpha: 1).setStroke()
            path3.stroke()
            context.restoreGState()
            
            
            /// Path 3 Copy
            let path3Copy = UIBezierPath()
            path3Copy.move(to: CGPoint(x: 0, y: 1))
            path3Copy.addLine(to: CGPoint(x: 300.99, y: 1))
            context.saveGState()
            context.translateBy(x: -0, y: 73)
            path3Copy.lineWidth = 0.5
            UIColor(white: 0.21, alpha: 1).setStroke()
            path3Copy.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and working in Stockholm. I have been connected with dance for more than 20 years starting from ballroom, modern and recently working with house and hip hop dance. I have been blessed to work with the best in Sweden and in the world by: taking classes and workshops and being part of productions like: Striving to Achieve; Ninja (Richfam); American Idiot (musical) or 5 degrees. I also joined many street dance battles with successes.")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 30, y: 216, width: 305, height: 209))
        context.restoreGState()
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawRegisterAsTrainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Name
        let name = NSMutableAttributedString(string: "Name")
        name.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: name.length))
        name.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: name.length))
        context.saveGState()
        name.draw(at: CGPoint(x: 34, y: 145))
        context.restoreGState()
        
        /// Age
        let age = NSMutableAttributedString(string: "Age")
        age.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: age.length))
        age.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: age.length))
        context.saveGState()
        age.draw(at: CGPoint(x: 34, y: 221))
        context.restoreGState()
        
        /// Training locations
        let trainingLocations = NSMutableAttributedString(string: "Training locations")
        trainingLocations.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: trainingLocations.length))
        trainingLocations.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: trainingLocations.length))
        context.saveGState()
        trainingLocations.draw(at: CGPoint(x: 34, y: 382))
        context.restoreGState()
        
        /// Personal Description
        let personalDescription = NSMutableAttributedString(string: "Personal Description")
        personalDescription.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: personalDescription.length))
        personalDescription.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: personalDescription.length))
        context.saveGState()
        personalDescription.draw(at: CGPoint(x: 29, y: 572))
        context.restoreGState()
        
        /// Connect Social Accou
        let connectSocialAccou = NSMutableAttributedString(string: "Connect Social Accounts")
        connectSocialAccou.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: connectSocialAccou.length))
        connectSocialAccou.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: connectSocialAccou.length))
        context.saveGState()
        connectSocialAccou.draw(at: CGPoint(x: 34, y: 717))
        context.restoreGState()
        
        /// Possible Workout gro
        let possibleWorkoutGro = NSMutableAttributedString(string: "Possible Workout groups")
        possibleWorkoutGro.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: possibleWorkoutGro.length))
        possibleWorkoutGro.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: possibleWorkoutGro.length))
        context.saveGState()
        possibleWorkoutGro.draw(at: CGPoint(x: 29, y: 491))
        context.restoreGState()
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 29, y: 516)
            
            /// btn_workoutgroups_selectable
            // Warning: New symbols are not supported.
            
            
            /// btn_workoutgroups_selectable copy
            // Warning: New symbols are not supported.
            
            
            /// btn_workoutgroups_selectable copy 2
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Type of training you
        let typeOfTrainingYou = NSMutableAttributedString(string: "Type of training you offer")
        typeOfTrainingYou.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: typeOfTrainingYou.length))
        typeOfTrainingYou.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: typeOfTrainingYou.length))
        context.saveGState()
        typeOfTrainingYou.draw(at: CGPoint(x: 29, y: 306))
        context.restoreGState()
        
        /// Locations, separate
        let locationsSeparate = NSMutableAttributedString(string: "Locations, separate places with commas,")
        locationsSeparate.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: locationsSeparate.length))
        locationsSeparate.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: locationsSeparate.length))
        context.saveGState()
        locationsSeparate.draw(at: CGPoint(x: 45, y: 420))
        context.restoreGState()
        
        /// I can travel to meet
        let iCanTravelToMeet = NSMutableAttributedString(string: "I can travel to meet the client")
        iCanTravelToMeet.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: iCanTravelToMeet.length))
        iCanTravelToMeet.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: iCanTravelToMeet.length))
        context.saveGState()
        iCanTravelToMeet.draw(at: CGPoint(x: 59, y: 462))
        context.restoreGState()
        
        /// tickbox
        let tickbox = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 21, height: 21))
        context.saveGState()
        context.translateBy(x: 31, y: 461)
        UIColor.white.setFill()
        tickbox.fill()
        context.saveGState()
        UIRectClip(tickbox.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.808, alpha: 1).setFill()
            tickbox.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -21, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 22, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                tickbox.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        UIRectClip(tickbox.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.945, alpha: 1).setFill()
            tickbox.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: tickbox.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -21, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 20, y: -1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                tickbox.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 29, y: 332)
            
            /// icn_running
            // Warning: New symbols are not supported.
            
            
            /// icn_crossfit
            // Warning: New symbols are not supported.
            
            
            /// icn_gym
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga copy
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Oval
        let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
        context.saveGState()
        context.translateBy(x: 32, y: 742)
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        oval.fill()
        context.restoreGState()
        
        /// Oval Copy
        let ovalCopy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
        context.saveGState()
        context.translateBy(x: 96, y: 742)
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        ovalCopy.fill()
        context.restoreGState()
        
        /// Oval Copy 2
        let ovalCopy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 50, height: 50))
        context.saveGState()
        context.translateBy(x: 160, y: 742)
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        ovalCopy2.fill()
        context.restoreGState()
        
        /// icn/socialmedia/instagram
        // Warning: New symbols are not supported.
        
        /// icn/socialmedia/facebook
        // Warning: New symbols are not supported.
        
        /// icn/socialmedia/twitter
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawCheckInTrainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// QR_code_for_mobile_English_Wikipedia.svg
        // Warning: Image layers are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 92, y: 657)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Done
            let done = NSMutableAttributedString(string: "Done\n")
            done.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: done.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                done.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: done.length))
            }
            done.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: done.length))
            context.saveGState()
            done.draw(at: CGPoint(x: 81, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawCheckInUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 92, y: 657)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Check In
            let checkIn = NSMutableAttributedString(string: "Check In")
            checkIn.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: checkIn.length))
            checkIn.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: checkIn.length))
            context.saveGState()
            checkIn.draw(at: CGPoint(x: 71, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Rectangle 12
        let rectangle12 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 175, height: 175))
        context.saveGState()
        context.translateBy(x: 100, y: 236)
        context.saveGState()
        rectangle12.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle12.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle12.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 153.5, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 222, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 222, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 222))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 222))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 153.5))
        combinedShape.addLine(to: CGPoint(x: 0, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 68.5))
        combinedShape.addLine(to: CGPoint(x: 68.5, y: 0))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 0))
        combinedShape.addLine(to: CGPoint(x: 153.5, y: 68.5))
        combinedShape.close()
        context.saveGState()
        context.translateBy(x: 77, y: 212)
        combinedShape.usesEvenOddFillRule = true
        UIColor.white.setFill()
        combinedShape.fill()
        context.restoreGState()
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 86, height: 86))
        context.saveGState()
        context.translateBy(x: 145, y: 280)
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawSummarizeTraining_Trainer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Cells/Slider
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 2
        // Warning: New symbols are not supported.
        
        /// Cells/Slider Copy 3
        // Warning: New symbols are not supported.
        
        /// Name Lastname
        let nameLastname = NSMutableAttributedString(string: "Name Lastname")
        nameLastname.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: nameLastname.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            nameLastname.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: nameLastname.length))
        }
        context.saveGState()
        nameLastname.draw(in: CGRect(x: 143, y: 216, width: 90, height: 20))
        context.restoreGState()
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 90, y: 697)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Log Session
            let logSession = NSMutableAttributedString(string: "Log Session")
            logSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: logSession.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                logSession.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: logSession.length))
            }
            logSession.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: logSession.length))
            context.saveGState()
            logSession.draw(at: CGPoint(x: 63.5, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Rectangle 14
        let rectangle14 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 304, height: 73))
        context.saveGState()
        context.translateBy(x: 35, y: 598)
        context.saveGState()
        rectangle14.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle14.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle14.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Cardio
        let cardio = NSMutableAttributedString(string: "Cardio")
        cardio.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cardio.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            cardio.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cardio.length))
        }
        context.saveGState()
        cardio.draw(in: CGRect(x: 161, y: 290, width: 53, height: 30))
        context.restoreGState()
        
        /// Strength
        let strength = NSMutableAttributedString(string: "Strength")
        strength.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: strength.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            strength.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: strength.length))
        }
        context.saveGState()
        strength.draw(in: CGRect(x: 154, y: 350, width: 67, height: 30))
        context.restoreGState()
        
        /// Mobility
        let mobility = NSMutableAttributedString(string: "Mobility")
        mobility.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: mobility.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            mobility.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mobility.length))
        }
        context.saveGState()
        mobility.draw(in: CGRect(x: 156, y: 423, width: 64, height: 30))
        context.restoreGState()
        
        /// Intensity
        let intensity = NSMutableAttributedString(string: "Intensity")
        intensity.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: intensity.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            intensity.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: intensity.length))
        }
        context.saveGState()
        intensity.draw(in: CGRect(x: 154, y: 488, width: 67, height: 30))
        context.restoreGState()
        
        /// summarize training s
        let summarizeTrainingS = NSMutableAttributedString(string: "summarize training session with")
        summarizeTrainingS.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 22)!, range: NSRange(location: 0, length: summarizeTrainingS.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            summarizeTrainingS.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: summarizeTrainingS.length))
        }
        summarizeTrainingS.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: summarizeTrainingS.length))
        context.saveGState()
        summarizeTrainingS.draw(at: CGPoint(x: 38, y: 92))
        context.restoreGState()
        
        /// Focus levels
        let focusLevels = NSMutableAttributedString(string: "Focus levels")
        focusLevels.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: focusLevels.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            focusLevels.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: focusLevels.length))
        }
        focusLevels.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: focusLevels.length))
        context.saveGState()
        focusLevels.draw(at: CGPoint(x: 158, y: 262))
        context.restoreGState()
        
        /// Short description of
        let shortDescriptionOf = NSMutableAttributedString(string: "Short description of training")
        shortDescriptionOf.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: shortDescriptionOf.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            shortDescriptionOf.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: shortDescriptionOf.length))
        }
        shortDescriptionOf.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: shortDescriptionOf.length))
        context.saveGState()
        shortDescriptionOf.draw(at: CGPoint(x: 117, y: 576))
        context.restoreGState()
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// (3)
        let _3 = NSMutableAttributedString(string: "(3)")
        _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _3.length))
        _3.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(at: CGPoint(x: 223, y: 234))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 148, y: 235)
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-outlined
            // Warning: New symbols are not supported.
            
            
            /// ico_star-outlined
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawRateTrainingClient(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Name Lastname
        let nameLastname = NSMutableAttributedString(string: "Name Lastname")
        nameLastname.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: nameLastname.length))
        context.saveGState()
        nameLastname.draw(in: CGRect(x: 42, y: 158.31, width: 90, height: 20))
        context.restoreGState()
        
        /// ico_star-filled
        // Warning: New symbols are not supported.
        
        /// ico_star-filled
        // Warning: New symbols are not supported.
        
        /// ico_star-filled
        // Warning: New symbols are not supported.
        
        /// ico_star-outlined
        // Warning: New symbols are not supported.
        
        /// ico_star-outlined
        // Warning: New symbols are not supported.
        
        /// The trainers descrip
        let theTrainersDescrip = NSMutableAttributedString(string: "The trainers descripton of the session")
        theTrainersDescrip.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: theTrainersDescrip.length))
        context.saveGState()
        theTrainersDescrip.draw(in: CGRect(x: 41, y: 204, width: 304, height: 81))
        context.restoreGState()
        
        /// (3)
        let _3 = NSMutableAttributedString(string: "(3)")
        _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _3.length))
        _3.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(at: CGPoint(x: 118, y: 177))
        context.restoreGState()
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 90, y: 657)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Rate Session
            let rateSession = NSMutableAttributedString(string: "Rate Session")
            rateSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: rateSession.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                rateSession.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: rateSession.length))
            }
            rateSession.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: rateSession.length))
            context.saveGState()
            rateSession.draw(at: CGPoint(x: 61, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Rate training sessio
        let rateTrainingSessio = NSMutableAttributedString(string: "Rate training session")
        rateTrainingSessio.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 22)!, range: NSRange(location: 0, length: rateTrainingSessio.length))
        rateTrainingSessio.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.031, brightness: 0.118, alpha: 1), range: NSRange(location: 0, length: rateTrainingSessio.length))
        context.saveGState()
        rateTrainingSessio.draw(at: CGPoint(x: 92, y: 332))
        context.restoreGState()
        
        /// Rectangle 14
        let rectangle14 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 304, height: 98))
        context.saveGState()
        context.translateBy(x: 35, y: 447)
        context.saveGState()
        rectangle14.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle14.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle14.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Cardio
        let cardio = NSMutableAttributedString(string: "Cardio")
        cardio.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cardio.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            cardio.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cardio.length))
        }
        context.saveGState()
        cardio.draw(at: CGPoint(x: 154, y: 82))
        context.restoreGState()
        
        /// Strength
        let strength = NSMutableAttributedString(string: "Strength")
        strength.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: strength.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            strength.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: strength.length))
        }
        context.saveGState()
        strength.draw(at: CGPoint(x: 145, y: 101))
        context.restoreGState()
        
        /// Mobility
        let mobility = NSMutableAttributedString(string: "Mobility")
        mobility.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: mobility.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            mobility.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mobility.length))
        }
        context.saveGState()
        mobility.draw(at: CGPoint(x: 147, y: 121))
        context.restoreGState()
        
        /// Intensity
        let intensity = NSMutableAttributedString(string: "Intensity")
        intensity.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: intensity.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            intensity.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: intensity.length))
        }
        context.saveGState()
        intensity.draw(at: CGPoint(x: 145, y: 141))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 128, y: 381)
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 2
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 3
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 4
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 84)
            
            /// Rectangle 15
            let rectangle15 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 73, height: 10))
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle15.fill()
            context.restoreGState()
            
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.5)
                context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle9.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -147, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 5
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 123)
            
            /// Rectangle 15 Copy 2
            let rectangle15Copy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 10))
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle15Copy2.fill()
            context.restoreGState()
            
            
            /// Rectangle 9 Copy
            let rectangle9Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9Copy.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.5)
                context.beginTransparencyLayer(in: rectangle9Copy.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle9Copy.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9Copy.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -147, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9Copy.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9Copy.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9Copy.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9Copy.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 143)
            
            /// Group 7
            do {
                context.saveGState()
                
                /// Rectangle 15 Copy 4
                let rectangle15Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 10))
                context.saveGState()
                UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
                rectangle15Copy4.fill()
                context.restoreGState()
                
                
                /// Rectangle 9 Copy 3
                let rectangle9Copy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
                context.saveGState()
                context.setAlpha(0.5)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    UIRectClip(rectangle9Copy3.bounds)
                    context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                    context.setAlpha(0.5)
                    context.beginTransparencyLayer(in: rectangle9Copy3.bounds, auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        rectangle9Copy3.fill()
                        context.setBlendMode(.destinationOut)
                        context.beginTransparencyLayer(in: rectangle9Copy3.bounds, auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: -147, y: 0)
                            do {
                                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                            }
                            UIColor.black.setFill()
                            rectangle9Copy3.fill()
                        }
                        context.endTransparencyLayer()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    context.saveGState()
                    rectangle9Copy3.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle9Copy3.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor(white: 0.81, alpha: 1).setStroke()
                    rectangle9Copy3.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        /// Group 4
        do {
            context.saveGState()
            context.translateBy(x: 194, y: 103)
            
            /// Rectangle 15 Copy
            let rectangle15Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 112, height: 10))
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle15Copy.fill()
            context.restoreGState()
            
            
            /// Rectangle 9 Copy 2
            let rectangle9Copy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 147, height: 10))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9Copy2.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.5)
                context.beginTransparencyLayer(in: rectangle9Copy2.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle9Copy2.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9Copy2.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -147, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 147, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9Copy2.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9Copy2.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9Copy2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9Copy2.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawTrainingRequested(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_booking-requested
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy
        // Warning: New symbols are not supported.
        
        /// box_booking-requested copy 2
        // Warning: New symbols are not supported.
        
        /// YOU HAVE BOOKINGS RE
        let yOUHAVEBOOKINGSRE = NSMutableAttributedString(string: "YOU HAVE BOOKINGS\nREQUESTED FROM")
        yOUHAVEBOOKINGSRE.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: yOUHAVEBOOKINGSRE.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            yOUHAVEBOOKINGSRE.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: yOUHAVEBOOKINGSRE.length))
        }
        yOUHAVEBOOKINGSRE.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: yOUHAVEBOOKINGSRE.length))
        context.saveGState()
        yOUHAVEBOOKINGSRE.draw(at: CGPoint(x: 81, y: 67))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBooking(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Group 7
        do {
            context.saveGState()
            context.translateBy(x: 20, y: 750)
            
            /// Path 2
            let path2 = UIBezierPath()
            path2.move(to: CGPoint.zero)
            path2.addLine(to: CGPoint(x: 10, y: 10.29))
            path2.addLine(to: CGPoint(x: 0, y: 20))
            context.saveGState()
            context.translateBy(x: 326, y: 0)
            path2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            path2.stroke()
            context.restoreGState()
            
            
            /// Path 2 Copy
            let path2Copy = UIBezierPath()
            path2Copy.move(to: CGPoint.zero)
            path2Copy.addLine(to: CGPoint(x: 10, y: 10.29))
            path2Copy.addLine(to: CGPoint(x: 0, y: 20))
            context.saveGState()
            context.translateBy(x: 5, y: 10)
            context.rotate(by: 540 * CGFloat.pi/180)
            context.translateBy(x: -5, y: -10)
            path2Copy.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            path2Copy.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and working in Stockholm. I have been connected with dance for more than 20 years starting from ballroom, modern and recently working with house and hip hop dance. I have been blessed to work with the best in Sweden and in the world by: taking classes and workshops and being part of productions like: Striving to Achieve; Ninja (Richfam); American Idiot (musical) or 5 degrees. I also joined many street dance battles with successes.")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 35, y: 198, width: 304, height: 209))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 30, y: 406)
            
            /// Pick Date
            let pickDate = NSMutableAttributedString(string: "Pick Date")
            pickDate.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickDate.length))
            pickDate.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickDate.length))
            context.saveGState()
            pickDate.draw(in: CGRect(x: 0, y: 0, width: 96, height: 20))
            context.restoreGState()
            
            
            /// Pick Time
            let pickTime = NSMutableAttributedString(string: "Pick Time")
            pickTime.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickTime.length))
            pickTime.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickTime.length))
            context.saveGState()
            pickTime.draw(in: CGRect(x: 0, y: 53, width: 96, height: 20))
            context.restoreGState()
            
            
            /// ico_swipe_up
            // Warning: New symbols are not supported.
            
            
            /// ico_swipe_up copy
            // Warning: New symbols are not supported.
            
            
            /// Path 3
            let path3 = UIBezierPath()
            path3.move(to: CGPoint(x: 0, y: 1))
            path3.addLine(to: CGPoint(x: 300.99, y: 1))
            context.saveGState()
            context.translateBy(x: -0, y: 22)
            path3.lineWidth = 0.5
            UIColor(white: 0.21, alpha: 1).setStroke()
            path3.stroke()
            context.restoreGState()
            
            
            /// Path 3 Copy
            let path3Copy = UIBezierPath()
            path3Copy.move(to: CGPoint(x: 0, y: 1))
            path3Copy.addLine(to: CGPoint(x: 300.99, y: 1))
            context.saveGState()
            context.translateBy(x: -0, y: 73)
            path3Copy.lineWidth = 0.5
            UIColor(white: 0.21, alpha: 1).setStroke()
            path3Copy.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group 6
        do {
            context.saveGState()
            context.translateBy(x: 92, y: 679)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 192, height: 42), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Book now
            let bookNow = NSMutableAttributedString(string: "Book now")
            bookNow.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: bookNow.length))
            bookNow.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: bookNow.length))
            context.saveGState()
            bookNow.draw(at: CGPoint(x: 71, y: 13))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Next trainer
        let nextTrainer = NSMutableAttributedString(string: "Next trainer")
        nextTrainer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: nextTrainer.length))
        context.saveGState()
        nextTrainer.draw(at: CGPoint(x: 160, y: 752))
        context.restoreGState()
        
        /// profile_map-view copy
        // Warning: New symbols are not supported.
        
        /// How many people?
        let howManyPeople = NSMutableAttributedString(string: "How many people?")
        howManyPeople.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: howManyPeople.length))
        howManyPeople.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: howManyPeople.length))
        context.saveGState()
        howManyPeople.draw(in: CGRect(x: 30, y: 582, width: 158, height: 20))
        context.restoreGState()
        
        /// btn_workoutgroups_selectable copy 3
        // Warning: New symbols are not supported.
        
        /// btn_workoutgroups_selectable copy 4
        // Warning: New symbols are not supported.
        
        /// btn_workoutgroups_selectable copy 5
        // Warning: New symbols are not supported.
        
        /// Pick type of trainin
        let pickTypeOfTrainin = NSMutableAttributedString(string: "Pick type of training")
        pickTypeOfTrainin.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: pickTypeOfTrainin.length))
        pickTypeOfTrainin.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: pickTypeOfTrainin.length))
        context.saveGState()
        pickTypeOfTrainin.draw(in: CGRect(x: 30, y: 499, width: 158, height: 20))
        context.restoreGState()
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 30, y: 537)
            
            /// icn_crossfit
            // Warning: New symbols are not supported.
            
            
            /// icn_gym
            // Warning: New symbols are not supported.
            
            
            /// icn_yoga copy
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawFindTrainingUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Bitmap
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 44)
            
            /// Mask
            let mask = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 528))
            context.saveGState()
            UIColor(hue: 0.655, saturation: 0.14, brightness: 0.213, alpha: 1).setFill()
            mask.fill()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// Bitmap
            // Warning: Image layers are not supported.
            
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// bg plate
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 559)
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 163.6, y: 12.9))
            combinedShape.addCurve(to: CGPoint(x: 175.03, y: 6.37), controlPoint1: CGPoint(x: 168.17, y: 12.45), controlPoint2: CGPoint(x: 172.42, y: 10.16))
            combinedShape.addCurve(to: CGPoint(x: 187.17, y: 0), controlPoint1: CGPoint(x: 177.67, y: 2.53), controlPoint2: CGPoint(x: 182.12, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 199.32, y: 6.37), controlPoint1: CGPoint(x: 192.22, y: 0), controlPoint2: CGPoint(x: 196.68, y: 2.53))
            combinedShape.addCurve(to: CGPoint(x: 210.74, y: 12.9), controlPoint1: CGPoint(x: 201.93, y: 10.16), controlPoint2: CGPoint(x: 206.18, y: 12.45))
            combinedShape.addLine(to: CGPoint(x: 375, y: 12.9))
            combinedShape.addLine(to: CGPoint(x: 375, y: 252.9))
            combinedShape.addLine(to: CGPoint(x: 0, y: 252.9))
            combinedShape.addLine(to: CGPoint(x: 0, y: 12.9))
            combinedShape.addLine(to: CGPoint(x: 163.6, y: 12.9))
            combinedShape.close()
            context.saveGState()
            context.translateBy(x: 0, y: 0.1)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(combinedShape.cgPath)
            context.addRect(combinedShape.bounds.insetBy(dx: -20, dy: -22))
            context.clip(using: .evenOdd)
            context.translateBy(x: -396, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 396, y: -2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 20 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.26).cgColor)
            }
            UIColor.black.setFill()
            combinedShape.fill()
            context.restoreGState()
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            
            /// ico_swipe_up
            // Warning: New symbols are not supported.
            
            
            /// Swipe up for more
            let swipeUpForMore = NSMutableAttributedString(string: "Swipe up for more")
            swipeUpForMore.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: swipeUpForMore.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                swipeUpForMore.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: swipeUpForMore.length))
            }
            context.saveGState()
            swipeUpForMore.draw(at: CGPoint(x: 146, y: 16))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// MAP
        let mAP = NSMutableAttributedString(string: "MAP")
        mAP.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: mAP.length))
        mAP.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: mAP.length))
        context.saveGState()
        mAP.draw(at: CGPoint(x: 172, y: 314))
        context.restoreGState()
        
        /// Trainer_pin
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 4
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 11
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 5
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 6
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 7
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 12
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 8
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 9
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 2
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 3
        // Warning: New symbols are not supported.
        
        /// Trainer_pin Copy 10
        // Warning: New symbols are not supported.
        
        /// profile_map-view
        // Warning: New symbols are not supported.
        
        /// My name is Pawel ”Pa
        let myNameIsPawelPa = NSMutableAttributedString(string: "My name is Pawel ”Pablo” Krupa and I am professional dancer/choreographer/teacher as well as Personal Trainer living and … more")
        myNameIsPawelPa.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: myNameIsPawelPa.length))
        context.saveGState()
        myNameIsPawelPa.draw(in: CGRect(x: 142, y: 663, width: 197, height: 80))
        context.restoreGState()
        
        /// icn_fighting
        do {
            context.saveGState()
            context.translateBy(x: 142, y: 745)
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 31, height: 18.48), cornerRadius: 29)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
            rectangle3.fill()
            context.restoreGState()
            
            
            /// icn/fighting
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// icn_gym
        do {
            context.saveGState()
            context.translateBy(x: 181, y: 745)
            
            /// Rectangle 3
            let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 31, height: 18.48), cornerRadius: 29)
            context.saveGState()
            UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
            rectangle7.fill()
            context.restoreGState()
            
            
            /// icn/gym
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawMenuOpen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group 2
        do {
            context.saveGState()
            
            /// iPhone X/Status Bars/Status Bar (Black)
            // Warning: New symbols are not supported.
            
            
            /// img_profiles
            // Warning: New symbols are not supported.
            
            
            /// John Doe
            let johnDoe = NSMutableAttributedString(string: "John Doe")
            johnDoe.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: johnDoe.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
            }
            context.saveGState()
            johnDoe.draw(in: CGRect(x: 126, y: 66, width: 123, height: 49))
            context.restoreGState()
            
            
            /// Level
            do {
                context.saveGState()
                context.translateBy(x: 75, y: 243)
                
                /// Rectangle 9
                let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 226, height: 20))
                context.saveGState()
                context.setAlpha(0.5)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.saveGState()
                    UIRectClip(rectangle9.bounds)
                    context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                    context.setAlpha(0.5)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        rectangle9.fill()
                        context.setBlendMode(.destinationOut)
                        context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: -226, y: 0)
                            do {
                                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 226, y: 1)).applying(baseTransform)
                                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                            }
                            UIColor.black.setFill()
                            rectangle9.fill()
                        }
                        context.endTransparencyLayer()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    context.saveGState()
                    rectangle9.lineWidth = 2
                    context.beginPath()
                    context.addPath(rectangle9.cgPath)
                    context.clip(using: .evenOdd)
                    UIColor(white: 0.81, alpha: 1).setStroke()
                    rectangle9.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                
                /// Rectangle 9
                let rectangle7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 113, height: 20))
                context.saveGState()
                UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
                rectangle7.fill()
                context.saveGState()
                UIRectClip(rectangle7.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.5)
                context.beginTransparencyLayer(in: rectangle7.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle7.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle7.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -113, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 113, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle7.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.restoreGState()
                
                
                context.restoreGState()
            }
            
            
            /// icn_running copy
            // Warning: New symbols are not supported.
            
            
            /// icn_crossfit copy
            // Warning: New symbols are not supported.
            
            
            /// icn_gym copy
            // Warning: New symbols are not supported.
            
            
            /// 50/50
            let _5050 = NSMutableAttributedString(string: "50/50")
            _5050.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 30)!, range: NSRange(location: 0, length: _5050.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _5050.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5050.length))
            }
            context.saveGState()
            _5050.draw(at: CGPoint(x: 148, y: 195))
            context.restoreGState()
            
            
            /// 34
            let _34 = NSMutableAttributedString(string: "34 ")
            _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: _34.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
            }
            context.saveGState()
            _34.draw(at: CGPoint(x: 238, y: 70))
            context.restoreGState()
            
            
            /// Loose weight Gain Mu
            let looseWeightGainMu = NSMutableAttributedString(string: "Loose weight\nGain Muscles\nCardio")
            looseWeightGainMu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGainMu.length))
            context.saveGState()
            looseWeightGainMu.draw(in: CGRect(x: 138, y: 95, width: 179, height: 63))
            context.restoreGState()
            
            
            /// box_latestsessions
            // Warning: New symbols are not supported.
            
            
            /// Misc/Big Button
            // Warning: New symbols are not supported.
            
            
            context.restoreGState()
        }
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 129, y: 30)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 246, height: 782))
            context.saveGState()
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            UIRectClip(rectangle2.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.5)
            context.beginTransparencyLayer(in: rectangle2.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle2.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: rectangle2.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -246, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 246.5, y: -0.5)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    rectangle2.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            /// icn-burgermenu
            // Warning: New symbols are not supported.
            
            
            /// Path 4
            let path4 = UIBezierPath()
            path4.move(to: CGPoint(x: 0, y: 1))
            path4.addLine(to: CGPoint(x: 154.63, y: 1))
            context.saveGState()
            context.translateBy(x: 53, y: 122)
            path4.lineWidth = 0.5
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setStroke()
            path4.stroke()
            context.restoreGState()
            
            
            /// Payment method
            let paymentMethod = NSMutableAttributedString(string: "Payment method")
            paymentMethod.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: paymentMethod.length))
            paymentMethod.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: paymentMethod.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paymentMethod.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: paymentMethod.length))
            }
            paymentMethod.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: paymentMethod.length))
            context.saveGState()
            paymentMethod.draw(at: CGPoint(x: 66, y: 153))
            context.restoreGState()
            
            
            /// Condition & Terms
            let conditionTerms = NSMutableAttributedString(string: "Condition & Terms")
            conditionTerms.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: conditionTerms.length))
            conditionTerms.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: conditionTerms.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                conditionTerms.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: conditionTerms.length))
            }
            conditionTerms.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: conditionTerms.length))
            context.saveGState()
            conditionTerms.draw(at: CGPoint(x: 62, y: 182))
            context.restoreGState()
            
            
            /// Delete Account
            let deleteAccount = NSMutableAttributedString(string: "Delete Account")
            deleteAccount.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: deleteAccount.length))
            deleteAccount.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: deleteAccount.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                deleteAccount.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: deleteAccount.length))
            }
            deleteAccount.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: deleteAccount.length))
            context.saveGState()
            deleteAccount.draw(at: CGPoint(x: 74, y: 211))
            context.restoreGState()
            
            
            /// Notification Setting
            let notificationSetting = NSMutableAttributedString(string: "Notification Settings")
            notificationSetting.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: notificationSetting.length))
            notificationSetting.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: notificationSetting.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                notificationSetting.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: notificationSetting.length))
            }
            notificationSetting.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: notificationSetting.length))
            context.saveGState()
            notificationSetting.draw(at: CGPoint(x: 57, y: 240))
            context.restoreGState()
            
            
            /// Edit Profile
            let editProfile = NSMutableAttributedString(string: "Edit Profile")
            editProfile.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: editProfile.length))
            editProfile.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: editProfile.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                editProfile.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: editProfile.length))
            }
            editProfile.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: editProfile.length))
            context.saveGState()
            editProfile.draw(at: CGPoint(x: 91, y: 272))
            context.restoreGState()
            
            
            /// Reccomend A Friend
            let reccomendAFriend = NSMutableAttributedString(string: "Reccomend A Friend")
            reccomendAFriend.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: reccomendAFriend.length))
            reccomendAFriend.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: reccomendAFriend.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                reccomendAFriend.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: reccomendAFriend.length))
            }
            reccomendAFriend.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: reccomendAFriend.length))
            context.saveGState()
            reccomendAFriend.draw(at: CGPoint(x: 54, y: 298))
            context.restoreGState()
            
            
            /// Recomendation Code
            let recomendationCode = NSMutableAttributedString(string: "Recomendation Code")
            recomendationCode.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: recomendationCode.length))
            recomendationCode.addAttribute(.kern, value: -0.28, range: NSRange(location: 0, length: recomendationCode.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                recomendationCode.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: recomendationCode.length))
            }
            recomendationCode.addAttribute(.foregroundColor, value: UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1), range: NSRange(location: 0, length: recomendationCode.length))
            context.saveGState()
            recomendationCode.draw(at: CGPoint(x: 50, y: 327))
            context.restoreGState()
            
            
            /// Log Out
            let logOut = NSMutableAttributedString(string: "Log Out")
            logOut.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: logOut.length))
            logOut.addAttribute(.kern, value: -1.22, range: NSRange(location: 0, length: logOut.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                logOut.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: logOut.length))
            }
            logOut.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: logOut.length))
            context.saveGState()
            logOut.draw(at: CGPoint(x: 102, y: 376))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawClientTrainingJournal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions copy
        // Warning: New symbols are not supported.
        
        /// box_latestsessions copy 2
        // Warning: New symbols are not supported.
        
        /// Training Journal.
        let trainingJournal = NSMutableAttributedString(string: "Training Journal.")
        trainingJournal.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: trainingJournal.length))
        trainingJournal.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: trainingJournal.length))
        context.saveGState()
        trainingJournal.draw(at: CGPoint(x: 47, y: 78))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawUserProfile2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 813), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 813), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 813)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 126, y: 66, width: 123, height: 49))
        context.restoreGState()
        
        /// Level
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 244)
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 226, height: 20))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.5)
                context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle9.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -226, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 226, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            /// Rectangle 9
            let rectangle7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 113, height: 20))
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle7.fill()
            context.saveGState()
            UIRectClip(rectangle7.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.5)
            context.beginTransparencyLayer(in: rectangle7.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle7.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: rectangle7.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -113, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 113, y: 1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    rectangle7.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// icn_running copy
        // Warning: New symbols are not supported.
        
        /// icn_crossfit copy
        // Warning: New symbols are not supported.
        
        /// icn_gym copy
        // Warning: New symbols are not supported.
        
        /// 50/50
        let _5050 = NSMutableAttributedString(string: "50/50")
        _5050.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 30)!, range: NSRange(location: 0, length: _5050.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5050.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5050.length))
        }
        context.saveGState()
        _5050.draw(at: CGPoint(x: 148, y: 195))
        context.restoreGState()
        
        /// 34
        let _34 = NSMutableAttributedString(string: "34 ")
        _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: _34.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
        }
        context.saveGState()
        _34.draw(at: CGPoint(x: 238, y: 70))
        context.restoreGState()
        
        /// Loose weight Gain Mu
        let looseWeightGainMu = NSMutableAttributedString(string: "Loose weight\nGain Muscles\nCardio")
        looseWeightGainMu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGainMu.length))
        context.saveGState()
        looseWeightGainMu.draw(in: CGRect(x: 138, y: 95, width: 179, height: 63))
        context.restoreGState()
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawUserProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 126, y: 66, width: 123, height: 49))
        context.restoreGState()
        
        /// Level
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 243)
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 226, height: 20))
            context.saveGState()
            context.setAlpha(0.5)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                UIRectClip(rectangle9.bounds)
                context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
                context.setAlpha(0.5)
                context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle9.fill()
                    context.setBlendMode(.destinationOut)
                    context.beginTransparencyLayer(in: rectangle9.bounds, auxiliaryInfo: nil)
                    do {
                        context.translateBy(x: -226, y: 0)
                        do {
                            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 226, y: 1)).applying(baseTransform)
                            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                        }
                        UIColor.black.setFill()
                        rectangle9.fill()
                    }
                    context.endTransparencyLayer()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                context.saveGState()
                rectangle9.lineWidth = 2
                context.beginPath()
                context.addPath(rectangle9.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.81, alpha: 1).setStroke()
                rectangle9.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            
            /// Rectangle 9
            let rectangle7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 113, height: 20))
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle7.fill()
            context.saveGState()
            UIRectClip(rectangle7.bounds)
            context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
            context.setAlpha(0.5)
            context.beginTransparencyLayer(in: rectangle7.bounds, auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle7.fill()
                context.setBlendMode(.destinationOut)
                context.beginTransparencyLayer(in: rectangle7.bounds, auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -113, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 113, y: 1)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                    }
                    UIColor.black.setFill()
                    rectangle7.fill()
                }
                context.endTransparencyLayer()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// icn_running copy
        // Warning: New symbols are not supported.
        
        /// icn_crossfit copy
        // Warning: New symbols are not supported.
        
        /// icn_gym copy
        // Warning: New symbols are not supported.
        
        /// 50/50
        let _5050 = NSMutableAttributedString(string: "50/50")
        _5050.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 30)!, range: NSRange(location: 0, length: _5050.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _5050.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5050.length))
        }
        context.saveGState()
        _5050.draw(at: CGPoint(x: 148, y: 195))
        context.restoreGState()
        
        /// 34
        let _34 = NSMutableAttributedString(string: "34 ")
        _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: _34.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _34.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _34.length))
        }
        context.saveGState()
        _34.draw(at: CGPoint(x: 238, y: 70))
        context.restoreGState()
        
        /// Loose weight Gain Mu
        let looseWeightGainMu = NSMutableAttributedString(string: "Loose weight\nGain Muscles\nCardio")
        looseWeightGainMu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGainMu.length))
        context.saveGState()
        looseWeightGainMu.draw(in: CGRect(x: 138, y: 95, width: 179, height: 63))
        context.restoreGState()
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// box_latestsessions
        // Warning: New symbols are not supported.
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawRegisterUser(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        /// icn-burgermenu
        // Warning: New symbols are not supported.
        
        /// Physique
        let physique = NSMutableAttributedString(string: "Physique")
        physique.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: physique.length))
        physique.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: physique.length))
        context.saveGState()
        physique.draw(at: CGPoint(x: 34, y: 402))
        context.restoreGState()
        
        /// Fit
        let fit = NSMutableAttributedString(string: "Fit")
        fit.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: fit.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            fit.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fit.length))
        }
        fit.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: fit.length))
        context.saveGState()
        fit.draw(at: CGPoint(x: 330, y: 474))
        context.restoreGState()
        
        /// Just starting
        let justStarting = NSMutableAttributedString(string: "Just starting")
        justStarting.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: justStarting.length))
        justStarting.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: justStarting.length))
        context.saveGState()
        justStarting.draw(at: CGPoint(x: 33, y: 474))
        context.restoreGState()
        
        /// Name
        let name = NSMutableAttributedString(string: "Name")
        name.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: name.length))
        name.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: name.length))
        context.saveGState()
        name.draw(at: CGPoint(x: 31, y: 153))
        context.restoreGState()
        
        /// Age
        let age = NSMutableAttributedString(string: "Age")
        age.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: age.length))
        age.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: age.length))
        context.saveGState()
        age.draw(at: CGPoint(x: 31, y: 229))
        context.restoreGState()
        
        /// Height
        let height = NSMutableAttributedString(string: "Height")
        height.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: height.length))
        height.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: height.length))
        context.saveGState()
        height.draw(at: CGPoint(x: 31, y: 313))
        context.restoreGState()
        
        /// cm
        let cm = NSMutableAttributedString(string: "cm")
        cm.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: cm.length))
        cm.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: cm.length))
        context.saveGState()
        cm.draw(at: CGPoint(x: 135, y: 363))
        context.restoreGState()
        
        /// kg
        let kg = NSMutableAttributedString(string: "kg")
        kg.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: kg.length))
        kg.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: kg.length))
        context.saveGState()
        kg.draw(at: CGPoint(x: 292, y: 363))
        context.restoreGState()
        
        /// Weight
        let weight = NSMutableAttributedString(string: "Weight")
        weight.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: weight.length))
        weight.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: weight.length))
        context.saveGState()
        weight.draw(at: CGPoint(x: 188, y: 313))
        context.restoreGState()
        
        /// Goals
        let goals = NSMutableAttributedString(string: "Goals")
        goals.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: goals.length))
        goals.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: goals.length))
        context.saveGState()
        goals.draw(at: CGPoint(x: 31, y: 598))
        context.restoreGState()
        
        /// Type of training
        let typeOfTraining = NSMutableAttributedString(string: "Type of training")
        typeOfTraining.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 13)!, range: NSRange(location: 0, length: typeOfTraining.length))
        typeOfTraining.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: typeOfTraining.length))
        context.saveGState()
        typeOfTraining.draw(at: CGPoint(x: 31, y: 516))
        context.restoreGState()
        
        /// - You can change thi
        let youCanChangeThi = NSMutableAttributedString(string: "- You can change this later")
        youCanChangeThi.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: youCanChangeThi.length))
        youCanChangeThi.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: youCanChangeThi.length))
        context.saveGState()
        youCanChangeThi.draw(at: CGPoint(x: 135, y: 519))
        context.restoreGState()
        
        /// - In a few words, de
        let inAFewWordsDe = NSMutableAttributedString(string: "- In a few words, describe your goals with your training")
        inAFewWordsDe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: inAFewWordsDe.length))
        inAFewWordsDe.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: inAFewWordsDe.length))
        context.saveGState()
        inAFewWordsDe.draw(at: CGPoint(x: 70, y: 601))
        context.restoreGState()
        
        /// input_txtfield
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 5
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 2
        // Warning: New symbols are not supported.
        
        /// input_txtfield copy 3
        // Warning: New symbols are not supported.
        
        /// Cells/Slider
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(at: CGPoint(x: 44, y: 188))
        context.restoreGState()
        
        /// 34
        let _34 = NSMutableAttributedString(string: "34")
        _34.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _34.length))
        _34.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _34.length))
        context.saveGState()
        _34.draw(at: CGPoint(x: 44, y: 263))
        context.restoreGState()
        
        /// 186
        let _186 = NSMutableAttributedString(string: "186")
        _186.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _186.length))
        _186.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _186.length))
        context.saveGState()
        _186.draw(at: CGPoint(x: 44, y: 346))
        context.restoreGState()
        
        /// (Loose weight, gain
        let looseWeightGain = NSMutableAttributedString(string: "(Loose weight, gain muscles, cardio etc.)")
        looseWeightGain.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: looseWeightGain.length))
        looseWeightGain.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: looseWeightGain.length))
        context.saveGState()
        looseWeightGain.draw(at: CGPoint(x: 44, y: 631))
        context.restoreGState()
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// 90
        let _90 = NSMutableAttributedString(string: "90")
        _90.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: _90.length))
        _90.addAttribute(.foregroundColor, value: UIColor(white: 0.48, alpha: 1), range: NSRange(location: 0, length: _90.length))
        context.saveGState()
        _90.draw(at: CGPoint(x: 198, y: 346))
        context.restoreGState()
        
        /// icn_running
        // Warning: New symbols are not supported.
        
        /// icn_crossfit
        // Warning: New symbols are not supported.
        
        /// icn_gym
        // Warning: New symbols are not supported.
        
        /// icn_yoga
        // Warning: New symbols are not supported.
        
        /// icn_yoga copy
        // Warning: New symbols are not supported.
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawCalendermonth(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 336, height: 290), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 336, height: 290), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 336, y: resizedFrame.height / 290)
        
        /// calender/day
        // Warning: New symbols are not supported.
        
        /// calender/day copy
        // Warning: New symbols are not supported.
        
        /// calender/day copy 2
        // Warning: New symbols are not supported.
        
        /// calender/day copy 3
        // Warning: New symbols are not supported.
        
        /// calender/day copy 4
        // Warning: New symbols are not supported.
        
        /// calender/day copy 5
        // Warning: New symbols are not supported.
        
        /// calender/day copy 6
        // Warning: New symbols are not supported.
        
        /// JULY
        let jULY = NSMutableAttributedString(string: "JULY")
        jULY.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: jULY.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            jULY.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: jULY.length))
        }
        jULY.addAttribute(.foregroundColor, value: UIColor(white: 0.519, alpha: 1), range: NSRange(location: 0, length: jULY.length))
        context.saveGState()
        jULY.draw(at: CGPoint(x: 151, y: 2))
        context.restoreGState()
        
        /// Mon
        let mon = NSMutableAttributedString(string: "Mon")
        mon.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: mon.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            mon.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: mon.length))
        }
        mon.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: mon.length))
        context.saveGState()
        mon.draw(at: CGPoint(x: 13, y: 27))
        context.restoreGState()
        
        /// Tue
        let tue = NSMutableAttributedString(string: "Tue")
        tue.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: tue.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            tue.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: tue.length))
        }
        tue.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: tue.length))
        context.saveGState()
        tue.draw(at: CGPoint(x: 64, y: 27))
        context.restoreGState()
        
        /// Wed
        let wed = NSMutableAttributedString(string: "Wed")
        wed.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: wed.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            wed.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: wed.length))
        }
        wed.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: wed.length))
        context.saveGState()
        wed.draw(at: CGPoint(x: 109, y: 27))
        context.restoreGState()
        
        /// Thu
        let thu = NSMutableAttributedString(string: "Thu")
        thu.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: thu.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            thu.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: thu.length))
        }
        thu.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: thu.length))
        context.saveGState()
        thu.draw(at: CGPoint(x: 159, y: 27))
        context.restoreGState()
        
        /// Fri
        let fri = NSMutableAttributedString(string: "Fri")
        fri.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: fri.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            fri.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: fri.length))
        }
        fri.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: fri.length))
        context.saveGState()
        fri.draw(at: CGPoint(x: 210, y: 27))
        context.restoreGState()
        
        /// Sat
        let sat = NSMutableAttributedString(string: "Sat")
        sat.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: sat.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            sat.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sat.length))
        }
        sat.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: sat.length))
        context.saveGState()
        sat.draw(at: CGPoint(x: 256, y: 27))
        context.restoreGState()
        
        /// Sun
        let sun = NSMutableAttributedString(string: "Sun")
        sun.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: sun.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            sun.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sun.length))
        }
        sun.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: sun.length))
        context.saveGState()
        sun.draw(at: CGPoint(x: 303, y: 27))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderdaybooked(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle6.fill()
        context.restoreGState()
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        /// 3
        let _3 = NSMutableAttributedString(string: "3")
        _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: _3.length))
        _3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(at: CGPoint(x: 5, y: 15))
        context.restoreGState()
        
        /// BOOKINGS
        let bOOKINGS = NSMutableAttributedString(string: "BOOKINGS")
        bOOKINGS.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 6)!, range: NSRange(location: 0, length: bOOKINGS.length))
        bOOKINGS.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: bOOKINGS.length))
        context.saveGState()
        bOOKINGS.draw(at: CGPoint(x: 5, y: 35))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderdaybookableCopy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        UIColor(hue: 1, saturation: 0.548, brightness: 1, alpha: 1).setFill()
        rectangle6.fill()
        context.restoreGState()
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        /// NOT AVAILABLE
        let nOTAVAILABLE = NSMutableAttributedString(string: "NOT\nAVAILABLE")
        nOTAVAILABLE.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 6)!, range: NSRange(location: 0, length: nOTAVAILABLE.length))
        nOTAVAILABLE.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: nOTAVAILABLE.length))
        context.saveGState()
        nOTAVAILABLE.draw(at: CGPoint(x: 3, y: 28))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderdaybookable(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        rectangle6.fill()
        context.restoreGState()
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        /// AVAILABLE
        let aVAILABLE = NSMutableAttributedString(string: "AVAILABLE")
        aVAILABLE.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 6)!, range: NSRange(location: 0, length: aVAILABLE.length))
        aVAILABLE.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: aVAILABLE.length))
        context.saveGState()
        aVAILABLE.draw(at: CGPoint(x: 3, y: 35))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCalenderday(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        
        /// 01
        let _01 = NSMutableAttributedString(string: "01")
        _01.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _01.length))
        _01.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: _01.length))
        context.saveGState()
        _01.draw(at: CGPoint(x: 2, y: 1))
        context.restoreGState()
        
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 15)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.foregroundColor, value: UIColor(hue: 0.667, saturation: 0.028, brightness: 0.586, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 20, y: 14))
        context.restoreGState()
        
        /// Rectangle 2
        let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 48, height: 48))
        context.saveGState()
        rectangle2.lineWidth = 0.5
        UIColor(white: 0.709, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnsocialmediafacebook(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 0)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 7, y: 0))
            clip2.addLine(to: CGPoint(x: 7, y: 15))
            clip2.addLine(to: CGPoint(x: 0, y: 15))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 1.55, y: 11.23))
            fill1.addCurve(to: CGPoint(x: 1.55, y: 7.71), controlPoint1: CGPoint(x: 1.55, y: 10.06), controlPoint2: CGPoint(x: 1.54, y: 8.89))
            fill1.addCurve(to: CGPoint(x: 1.3, y: 7.46), controlPoint1: CGPoint(x: 1.55, y: 7.51), controlPoint2: CGPoint(x: 1.5, y: 7.45))
            fill1.addCurve(to: CGPoint(x: 0.2, y: 7.47), controlPoint1: CGPoint(x: 0.93, y: 7.47), controlPoint2: CGPoint(x: 0.57, y: 7.46))
            fill1.addCurve(to: CGPoint(x: 0, y: 7.27), controlPoint1: CGPoint(x: 0.05, y: 7.47), controlPoint2: CGPoint(x: -0, y: 7.43))
            fill1.addCurve(to: CGPoint(x: 0, y: 5.07), controlPoint1: CGPoint(x: 0.01, y: 6.54), controlPoint2: CGPoint(x: 0.01, y: 5.81))
            fill1.addCurve(to: CGPoint(x: 0.18, y: 4.89), controlPoint1: CGPoint(x: -0, y: 4.93), controlPoint2: CGPoint(x: 0.04, y: 4.89))
            fill1.addCurve(to: CGPoint(x: 1.31, y: 4.9), controlPoint1: CGPoint(x: 0.56, y: 4.9), controlPoint2: CGPoint(x: 0.93, y: 4.88))
            fill1.addCurve(to: CGPoint(x: 1.56, y: 4.63), controlPoint1: CGPoint(x: 1.52, y: 4.91), controlPoint2: CGPoint(x: 1.57, y: 4.83))
            fill1.addCurve(to: CGPoint(x: 1.56, y: 2.96), controlPoint1: CGPoint(x: 1.55, y: 4.07), controlPoint2: CGPoint(x: 1.55, y: 3.51))
            fill1.addCurve(to: CGPoint(x: 2.17, y: 1.09), controlPoint1: CGPoint(x: 1.58, y: 2.28), controlPoint2: CGPoint(x: 1.76, y: 1.64))
            fill1.addCurve(to: CGPoint(x: 4.25, y: 0.03), controlPoint1: CGPoint(x: 2.68, y: 0.38), controlPoint2: CGPoint(x: 3.41, y: 0.06))
            fill1.addCurve(to: CGPoint(x: 6.84, y: 0), controlPoint1: CGPoint(x: 5.11, y: -0.01), controlPoint2: CGPoint(x: 5.98, y: 0.01))
            fill1.addCurve(to: CGPoint(x: 7, y: 0.16), controlPoint1: CGPoint(x: 6.96, y: -0), controlPoint2: CGPoint(x: 7, y: 0.04))
            fill1.addCurve(to: CGPoint(x: 7, y: 2.38), controlPoint1: CGPoint(x: 7, y: 0.9), controlPoint2: CGPoint(x: 6.99, y: 1.64))
            fill1.addCurve(to: CGPoint(x: 6.83, y: 2.55), controlPoint1: CGPoint(x: 7, y: 2.51), controlPoint2: CGPoint(x: 6.96, y: 2.55))
            fill1.addCurve(to: CGPoint(x: 5.58, y: 2.55), controlPoint1: CGPoint(x: 6.41, y: 2.55), controlPoint2: CGPoint(x: 6, y: 2.55))
            fill1.addCurve(to: CGPoint(x: 4.66, y: 3.39), controlPoint1: CGPoint(x: 5.03, y: 2.55), controlPoint2: CGPoint(x: 4.7, y: 2.84))
            fill1.addCurve(to: CGPoint(x: 4.64, y: 4.71), controlPoint1: CGPoint(x: 4.63, y: 3.83), controlPoint2: CGPoint(x: 4.65, y: 4.27))
            fill1.addCurve(to: CGPoint(x: 4.84, y: 4.86), controlPoint1: CGPoint(x: 4.64, y: 4.87), controlPoint2: CGPoint(x: 4.73, y: 4.86))
            fill1.addCurve(to: CGPoint(x: 6.73, y: 4.85), controlPoint1: CGPoint(x: 5.47, y: 4.85), controlPoint2: CGPoint(x: 6.1, y: 4.86))
            fill1.addCurve(to: CGPoint(x: 6.96, y: 5.09), controlPoint1: CGPoint(x: 6.92, y: 4.85), controlPoint2: CGPoint(x: 6.98, y: 4.89))
            fill1.addCurve(to: CGPoint(x: 6.75, y: 7.3), controlPoint1: CGPoint(x: 6.88, y: 5.82), controlPoint2: CGPoint(x: 6.81, y: 6.56))
            fill1.addCurve(to: CGPoint(x: 6.51, y: 7.49), controlPoint1: CGPoint(x: 6.73, y: 7.46), controlPoint2: CGPoint(x: 6.66, y: 7.5))
            fill1.addCurve(to: CGPoint(x: 5.01, y: 7.49), controlPoint1: CGPoint(x: 6.01, y: 7.49), controlPoint2: CGPoint(x: 5.51, y: 7.49))
            fill1.addCurve(to: CGPoint(x: 4.69, y: 7.81), controlPoint1: CGPoint(x: 4.65, y: 7.49), controlPoint2: CGPoint(x: 4.69, y: 7.44))
            fill1.addCurve(to: CGPoint(x: 4.69, y: 14.7), controlPoint1: CGPoint(x: 4.69, y: 10.1), controlPoint2: CGPoint(x: 4.68, y: 12.4))
            fill1.addCurve(to: CGPoint(x: 4.39, y: 15), controlPoint1: CGPoint(x: 4.69, y: 14.94), controlPoint2: CGPoint(x: 4.63, y: 15))
            fill1.addCurve(to: CGPoint(x: 1.82, y: 15), controlPoint1: CGPoint(x: 3.54, y: 14.98), controlPoint2: CGPoint(x: 2.68, y: 14.98))
            fill1.addCurve(to: CGPoint(x: 1.54, y: 14.71), controlPoint1: CGPoint(x: 1.58, y: 15), controlPoint2: CGPoint(x: 1.54, y: 14.92))
            fill1.addCurve(to: CGPoint(x: 1.55, y: 11.23), controlPoint1: CGPoint(x: 1.55, y: 13.55), controlPoint2: CGPoint(x: 1.55, y: 12.39))
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnsocialmediatwitter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 18.08, y: 0))
            clip2.addLine(to: CGPoint(x: 18.08, y: 14.88))
            clip2.addLine(to: CGPoint(x: 0, y: 14.88))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            context.restoreGState()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.apply(CGAffineTransform(translationX: -0, y: 0))
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 16.29, y: 3.67))
            fill1.addCurve(to: CGPoint(x: 0, y: 13.32), controlPoint1: CGPoint(x: 17.01, y: 9.54), controlPoint2: CGPoint(x: 10.14, y: 18.53))
            fill1.addCurve(to: CGPoint(x: 5.38, y: 11.61), controlPoint1: CGPoint(x: 0, y: 13.32), controlPoint2: CGPoint(x: 3.22, y: 13.63))
            fill1.addCurve(to: CGPoint(x: 1.83, y: 9), controlPoint1: CGPoint(x: 2.75, y: 11.7), controlPoint2: CGPoint(x: 1.83, y: 9))
            fill1.addCurve(to: CGPoint(x: 3.65, y: 8.84), controlPoint1: CGPoint(x: 1.83, y: 9), controlPoint2: CGPoint(x: 3.02, y: 9.55))
            fill1.addCurve(to: CGPoint(x: 0.67, y: 5.35), controlPoint1: CGPoint(x: 0.68, y: 8.06), controlPoint2: CGPoint(x: 0.67, y: 5.35))
            fill1.addCurve(to: CGPoint(x: 2.17, y: 5.71), controlPoint1: CGPoint(x: 0.67, y: 5.35), controlPoint2: CGPoint(x: 1.42, y: 5.79))
            fill1.addCurve(to: CGPoint(x: 1.15, y: 0.7), controlPoint1: CGPoint(x: -0.47, y: 3.39), controlPoint2: CGPoint(x: 1.15, y: 0.7))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 4.35), controlPoint1: CGPoint(x: 3.75, y: 3.92), controlPoint2: CGPoint(x: 6.42, y: 4.57))
            fill1.addCurve(to: CGPoint(x: 8.87, y: 3.68), controlPoint1: CGPoint(x: 8.89, y: 4.14), controlPoint2: CGPoint(x: 8.87, y: 3.91))
            fill1.addCurve(to: CGPoint(x: 12.55, y: 0), controlPoint1: CGPoint(x: 8.87, y: 1.65), controlPoint2: CGPoint(x: 10.52, y: 0))
            fill1.addCurve(to: CGPoint(x: 15.18, y: 1.1), controlPoint1: CGPoint(x: 13.58, y: 0), controlPoint2: CGPoint(x: 14.51, y: 0.42))
            fill1.addCurve(to: CGPoint(x: 17.57, y: 0.27), controlPoint1: CGPoint(x: 15.8, y: 1.1), controlPoint2: CGPoint(x: 16.77, y: 0.96))
            fill1.addCurve(to: CGPoint(x: 16.23, y: 2.27), controlPoint1: CGPoint(x: 17.57, y: 0.27), controlPoint2: CGPoint(x: 17.42, y: 1.73))
            fill1.addCurve(to: CGPoint(x: 16, y: 2.39), controlPoint1: CGPoint(x: 16.13, y: 2.31), controlPoint2: CGPoint(x: 16.06, y: 2.35))
            fill1.addCurve(to: CGPoint(x: 16.04, y: 2.51), controlPoint1: CGPoint(x: 15.81, y: 2.49), controlPoint2: CGPoint(x: 15.86, y: 2.53))
            fill1.addCurve(to: CGPoint(x: 18.08, y: 1.74), controlPoint1: CGPoint(x: 16.44, y: 2.47), controlPoint2: CGPoint(x: 17.48, y: 2.15))
            fill1.addCurve(to: CGPoint(x: 16.29, y: 3.67), controlPoint1: CGPoint(x: 17.84, y: 2.44), controlPoint2: CGPoint(x: 17.44, y: 3.19))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnsocialmediainstagram(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 3.73, y: 6.14))
            fill1.addCurve(to: CGPoint(x: 1.31, y: 3.73), controlPoint1: CGPoint(x: 2.39, y: 6.14), controlPoint2: CGPoint(x: 1.31, y: 5.06))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 1.31), controlPoint1: CGPoint(x: 1.31, y: 2.39), controlPoint2: CGPoint(x: 2.39, y: 1.31))
            fill1.addCurve(to: CGPoint(x: 6.14, y: 3.73), controlPoint1: CGPoint(x: 5.06, y: 1.31), controlPoint2: CGPoint(x: 6.14, y: 2.39))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 6.14), controlPoint1: CGPoint(x: 6.14, y: 5.06), controlPoint2: CGPoint(x: 5.06, y: 6.14))
            fill1.move(to: CGPoint(x: 3.73, y: 0))
            fill1.addCurve(to: CGPoint(x: 0, y: 3.73), controlPoint1: CGPoint(x: 1.67, y: 0), controlPoint2: CGPoint(x: 0, y: 1.67))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 7.45), controlPoint1: CGPoint(x: 0, y: 5.78), controlPoint2: CGPoint(x: 1.67, y: 7.45))
            fill1.addCurve(to: CGPoint(x: 7.45, y: 3.73), controlPoint1: CGPoint(x: 5.78, y: 7.45), controlPoint2: CGPoint(x: 7.45, y: 5.78))
            fill1.addCurve(to: CGPoint(x: 3.73, y: 0), controlPoint1: CGPoint(x: 7.45, y: 1.67), controlPoint2: CGPoint(x: 5.78, y: 0))
            context.saveGState()
            context.translateBy(x: 3.53, y: 3.82)
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 0.87, y: 0))
            fill3.addCurve(to: CGPoint(x: 0, y: 0.87), controlPoint1: CGPoint(x: 0.39, y: 0), controlPoint2: CGPoint(x: 0, y: 0.39))
            fill3.addCurve(to: CGPoint(x: 0.87, y: 1.74), controlPoint1: CGPoint(x: 0, y: 1.35), controlPoint2: CGPoint(x: 0.39, y: 1.74))
            fill3.addCurve(to: CGPoint(x: 1.74, y: 0.87), controlPoint1: CGPoint(x: 1.35, y: 1.74), controlPoint2: CGPoint(x: 1.74, y: 1.35))
            fill3.addCurve(to: CGPoint(x: 0.87, y: 0), controlPoint1: CGPoint(x: 1.74, y: 0.39), controlPoint2: CGPoint(x: 1.35, y: 0))
            context.saveGState()
            context.translateBy(x: 10.26, y: 2.81)
            fill3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill3.fill()
            context.restoreGState()
            
            
            /// Group 7
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 0.1)
                
                /// Clip 6
                let clip6 = UIBezierPath()
                clip6.move(to: CGPoint.zero)
                clip6.addLine(to: CGPoint(x: 14.51, y: 0))
                clip6.addLine(to: CGPoint(x: 14.51, y: 14.51))
                clip6.addLine(to: CGPoint(x: 0, y: 14.51))
                clip6.addLine(to: CGPoint.zero)
                clip6.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.2)
                context.restoreGState()
                
                
                /// Clip 6 (Outline Mask)
                context.saveGState()
                clip6.apply(CGAffineTransform(translationX: 0, y: 0.2))
                clip6.addClip()
                
                /// Fill 5
                let fill5 = UIBezierPath()
                fill5.move(to: CGPoint(x: 13.16, y: 10.19))
                fill5.addCurve(to: CGPoint(x: 12.91, y: 11.53), controlPoint1: CGPoint(x: 13.13, y: 10.89), controlPoint2: CGPoint(x: 13.01, y: 11.28))
                fill5.addCurve(to: CGPoint(x: 12.37, y: 12.37), controlPoint1: CGPoint(x: 12.78, y: 11.87), controlPoint2: CGPoint(x: 12.62, y: 12.11))
                fill5.addCurve(to: CGPoint(x: 11.53, y: 12.91), controlPoint1: CGPoint(x: 12.11, y: 12.62), controlPoint2: CGPoint(x: 11.87, y: 12.78))
                fill5.addCurve(to: CGPoint(x: 10.19, y: 13.16), controlPoint1: CGPoint(x: 11.28, y: 13.01), controlPoint2: CGPoint(x: 10.89, y: 13.13))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 13.2), controlPoint1: CGPoint(x: 9.42, y: 13.19), controlPoint2: CGPoint(x: 9.19, y: 13.2))
                fill5.addCurve(to: CGPoint(x: 4.32, y: 13.16), controlPoint1: CGPoint(x: 5.32, y: 13.2), controlPoint2: CGPoint(x: 5.09, y: 13.19))
                fill5.addCurve(to: CGPoint(x: 2.98, y: 12.91), controlPoint1: CGPoint(x: 3.62, y: 13.13), controlPoint2: CGPoint(x: 3.23, y: 13.01))
                fill5.addCurve(to: CGPoint(x: 2.14, y: 12.37), controlPoint1: CGPoint(x: 2.64, y: 12.78), controlPoint2: CGPoint(x: 2.4, y: 12.62))
                fill5.addCurve(to: CGPoint(x: 1.6, y: 11.53), controlPoint1: CGPoint(x: 1.89, y: 12.11), controlPoint2: CGPoint(x: 1.73, y: 11.87))
                fill5.addCurve(to: CGPoint(x: 1.35, y: 10.19), controlPoint1: CGPoint(x: 1.5, y: 11.28), controlPoint2: CGPoint(x: 1.38, y: 10.89))
                fill5.addCurve(to: CGPoint(x: 1.31, y: 7.25), controlPoint1: CGPoint(x: 1.31, y: 9.42), controlPoint2: CGPoint(x: 1.31, y: 9.19))
                fill5.addCurve(to: CGPoint(x: 1.35, y: 4.32), controlPoint1: CGPoint(x: 1.31, y: 5.32), controlPoint2: CGPoint(x: 1.31, y: 5.09))
                fill5.addCurve(to: CGPoint(x: 1.6, y: 2.98), controlPoint1: CGPoint(x: 1.38, y: 3.62), controlPoint2: CGPoint(x: 1.5, y: 3.23))
                fill5.addCurve(to: CGPoint(x: 2.14, y: 2.14), controlPoint1: CGPoint(x: 1.73, y: 2.64), controlPoint2: CGPoint(x: 1.89, y: 2.4))
                fill5.addCurve(to: CGPoint(x: 2.98, y: 1.6), controlPoint1: CGPoint(x: 2.4, y: 1.89), controlPoint2: CGPoint(x: 2.64, y: 1.73))
                fill5.addCurve(to: CGPoint(x: 4.32, y: 1.35), controlPoint1: CGPoint(x: 3.23, y: 1.5), controlPoint2: CGPoint(x: 3.62, y: 1.38))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 1.31), controlPoint1: CGPoint(x: 5.09, y: 1.31), controlPoint2: CGPoint(x: 5.32, y: 1.31))
                fill5.addCurve(to: CGPoint(x: 10.19, y: 1.35), controlPoint1: CGPoint(x: 9.19, y: 1.31), controlPoint2: CGPoint(x: 9.42, y: 1.31))
                fill5.addCurve(to: CGPoint(x: 11.53, y: 1.6), controlPoint1: CGPoint(x: 10.89, y: 1.38), controlPoint2: CGPoint(x: 11.28, y: 1.5))
                fill5.addCurve(to: CGPoint(x: 12.37, y: 2.14), controlPoint1: CGPoint(x: 11.87, y: 1.73), controlPoint2: CGPoint(x: 12.11, y: 1.89))
                fill5.addCurve(to: CGPoint(x: 12.91, y: 2.98), controlPoint1: CGPoint(x: 12.62, y: 2.4), controlPoint2: CGPoint(x: 12.78, y: 2.64))
                fill5.addCurve(to: CGPoint(x: 13.16, y: 4.32), controlPoint1: CGPoint(x: 13.01, y: 3.23), controlPoint2: CGPoint(x: 13.13, y: 3.62))
                fill5.addCurve(to: CGPoint(x: 13.2, y: 7.25), controlPoint1: CGPoint(x: 13.19, y: 5.09), controlPoint2: CGPoint(x: 13.2, y: 5.32))
                fill5.addCurve(to: CGPoint(x: 13.16, y: 10.19), controlPoint1: CGPoint(x: 13.2, y: 9.19), controlPoint2: CGPoint(x: 13.19, y: 9.42))
                fill5.move(to: CGPoint(x: 14.46, y: 4.26))
                fill5.addCurve(to: CGPoint(x: 14.13, y: 2.5), controlPoint1: CGPoint(x: 14.43, y: 3.49), controlPoint2: CGPoint(x: 14.31, y: 2.96))
                fill5.addCurve(to: CGPoint(x: 13.29, y: 1.22), controlPoint1: CGPoint(x: 13.94, y: 2.03), controlPoint2: CGPoint(x: 13.69, y: 1.62))
                fill5.addCurve(to: CGPoint(x: 12.01, y: 0.38), controlPoint1: CGPoint(x: 12.89, y: 0.81), controlPoint2: CGPoint(x: 12.48, y: 0.57))
                fill5.addCurve(to: CGPoint(x: 10.25, y: 0.04), controlPoint1: CGPoint(x: 11.54, y: 0.2), controlPoint2: CGPoint(x: 11.02, y: 0.08))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 0), controlPoint1: CGPoint(x: 9.47, y: 0.01), controlPoint2: CGPoint(x: 9.22, y: 0))
                fill5.addCurve(to: CGPoint(x: 4.26, y: 0.04), controlPoint1: CGPoint(x: 5.28, y: 0), controlPoint2: CGPoint(x: 5.04, y: 0.01))
                fill5.addCurve(to: CGPoint(x: 2.5, y: 0.38), controlPoint1: CGPoint(x: 3.49, y: 0.08), controlPoint2: CGPoint(x: 2.96, y: 0.2))
                fill5.addCurve(to: CGPoint(x: 1.22, y: 1.22), controlPoint1: CGPoint(x: 2.03, y: 0.57), controlPoint2: CGPoint(x: 1.62, y: 0.81))
                fill5.addCurve(to: CGPoint(x: 0.38, y: 2.5), controlPoint1: CGPoint(x: 0.81, y: 1.62), controlPoint2: CGPoint(x: 0.57, y: 2.03))
                fill5.addCurve(to: CGPoint(x: 0.04, y: 4.26), controlPoint1: CGPoint(x: 0.2, y: 2.96), controlPoint2: CGPoint(x: 0.08, y: 3.49))
                fill5.addCurve(to: CGPoint(x: 0, y: 7.25), controlPoint1: CGPoint(x: 0.01, y: 5.04), controlPoint2: CGPoint(x: 0, y: 5.28))
                fill5.addCurve(to: CGPoint(x: 0.04, y: 10.24), controlPoint1: CGPoint(x: 0, y: 9.22), controlPoint2: CGPoint(x: 0.01, y: 9.47))
                fill5.addCurve(to: CGPoint(x: 0.38, y: 12.01), controlPoint1: CGPoint(x: 0.08, y: 11.02), controlPoint2: CGPoint(x: 0.2, y: 11.54))
                fill5.addCurve(to: CGPoint(x: 1.22, y: 13.29), controlPoint1: CGPoint(x: 0.57, y: 12.48), controlPoint2: CGPoint(x: 0.81, y: 12.89))
                fill5.addCurve(to: CGPoint(x: 2.5, y: 14.13), controlPoint1: CGPoint(x: 1.62, y: 13.69), controlPoint2: CGPoint(x: 2.03, y: 13.94))
                fill5.addCurve(to: CGPoint(x: 4.26, y: 14.46), controlPoint1: CGPoint(x: 2.96, y: 14.31), controlPoint2: CGPoint(x: 3.49, y: 14.43))
                fill5.addCurve(to: CGPoint(x: 7.25, y: 14.51), controlPoint1: CGPoint(x: 5.04, y: 14.5), controlPoint2: CGPoint(x: 5.28, y: 14.51))
                fill5.addCurve(to: CGPoint(x: 10.25, y: 14.46), controlPoint1: CGPoint(x: 9.22, y: 14.51), controlPoint2: CGPoint(x: 9.47, y: 14.5))
                fill5.addCurve(to: CGPoint(x: 12.01, y: 14.13), controlPoint1: CGPoint(x: 11.02, y: 14.43), controlPoint2: CGPoint(x: 11.54, y: 14.31))
                fill5.addCurve(to: CGPoint(x: 13.29, y: 13.29), controlPoint1: CGPoint(x: 12.48, y: 13.94), controlPoint2: CGPoint(x: 12.89, y: 13.69))
                fill5.addCurve(to: CGPoint(x: 14.13, y: 12.01), controlPoint1: CGPoint(x: 13.69, y: 12.89), controlPoint2: CGPoint(x: 13.94, y: 12.48))
                fill5.addCurve(to: CGPoint(x: 14.46, y: 10.24), controlPoint1: CGPoint(x: 14.31, y: 11.54), controlPoint2: CGPoint(x: 14.43, y: 11.02))
                fill5.addCurve(to: CGPoint(x: 14.51, y: 7.25), controlPoint1: CGPoint(x: 14.5, y: 9.47), controlPoint2: CGPoint(x: 14.51, y: 9.22))
                fill5.addCurve(to: CGPoint(x: 14.46, y: 4.26), controlPoint1: CGPoint(x: 14.51, y: 5.28), controlPoint2: CGPoint(x: 14.5, y: 5.04))
                context.saveGState()
                context.translateBy(x: 0, y: 0.2)
                fill5.usesEvenOddFillRule = true
                UIColor.white.setFill()
                fill5.fill()
                context.restoreGState()
                
                
                context.restoreGState()
                // End Clip 6 (Outline Mask)
                
                context.restoreGState()
            }
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasefighting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 15)
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7.5)
            context.rotate(by: 450 * CGFloat.pi/180)
            context.translateBy(x: -7.5, y: -9)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 15, y: 0))
            clip2.addLine(to: CGPoint(x: 15, y: 18))
            clip2.addLine(to: CGPoint(x: 0, y: 18))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 8.83, y: 0))
            fill1.addCurve(to: CGPoint(x: 2.86, y: 4), controlPoint1: CGPoint(x: 8.83, y: 0), controlPoint2: CGPoint(x: 2.67, y: 0.14))
            fill1.addCurve(to: CGPoint(x: 3.57, y: 10.06), controlPoint1: CGPoint(x: 3.05, y: 7.87), controlPoint2: CGPoint(x: 3.57, y: 10.06))
            fill1.addCurve(to: CGPoint(x: 2.25, y: 5.78), controlPoint1: CGPoint(x: 3.57, y: 10.06), controlPoint2: CGPoint(x: 2.37, y: 9.01))
            fill1.addCurve(to: CGPoint(x: 0.1, y: 8.64), controlPoint1: CGPoint(x: 2.25, y: 5.78), controlPoint2: CGPoint(x: -0.55, y: 5.94))
            fill1.addCurve(to: CGPoint(x: 4.75, y: 14.24), controlPoint1: CGPoint(x: 0.74, y: 11.35), controlPoint2: CGPoint(x: 2.63, y: 13.74))
            fill1.addCurve(to: CGPoint(x: 5.28, y: 17.31), controlPoint1: CGPoint(x: 4.75, y: 14.24), controlPoint2: CGPoint(x: 5, y: 16.99))
            fill1.addCurve(to: CGPoint(x: 9.21, y: 17.99), controlPoint1: CGPoint(x: 5.56, y: 17.62), controlPoint2: CGPoint(x: 7.4, y: 17.97))
            fill1.addCurve(to: CGPoint(x: 12.36, y: 17.81), controlPoint1: CGPoint(x: 11.15, y: 18.02), controlPoint2: CGPoint(x: 11.91, y: 17.93))
            fill1.addCurve(to: CGPoint(x: 13.26, y: 16.71), controlPoint1: CGPoint(x: 12.91, y: 17.65), controlPoint2: CGPoint(x: 13.2, y: 16.99))
            fill1.addCurve(to: CGPoint(x: 13.64, y: 14.27), controlPoint1: CGPoint(x: 13.33, y: 16.43), controlPoint2: CGPoint(x: 13.64, y: 14.27))
            fill1.addCurve(to: CGPoint(x: 7.37, y: 14.62), controlPoint1: CGPoint(x: 13.64, y: 14.27), controlPoint2: CGPoint(x: 9.74, y: 15.4))
            fill1.addCurve(to: CGPoint(x: 13.8, y: 12.62), controlPoint1: CGPoint(x: 7.37, y: 14.62), controlPoint2: CGPoint(x: 12.83, y: 14.49))
            fill1.addCurve(to: CGPoint(x: 14.95, y: 3.64), controlPoint1: CGPoint(x: 13.8, y: 12.62), controlPoint2: CGPoint(x: 15.29, y: 7.96))
            fill1.addCurve(to: CGPoint(x: 8.83, y: 0), controlPoint1: CGPoint(x: 14.71, y: -0.15), controlPoint2: CGPoint(x: 8.83, y: 0))
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbaseyoga(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 27, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 17)
        
        /// Group
        do {
            context.saveGState()
            
            /// Oval 3
            let oval3 = UIBezierPath()
            oval3.move(to: CGPoint(x: 3.5, y: 15))
            oval3.addCurve(to: CGPoint(x: 7, y: 7.5), controlPoint1: CGPoint(x: 5.43, y: 15), controlPoint2: CGPoint(x: 7, y: 11.64))
            oval3.addCurve(to: CGPoint(x: 3.5, y: 0), controlPoint1: CGPoint(x: 7, y: 3.36), controlPoint2: CGPoint(x: 3.5, y: 0))
            oval3.addCurve(to: CGPoint(x: 0, y: 7.5), controlPoint1: CGPoint(x: 3.5, y: 0), controlPoint2: CGPoint(x: 0, y: 3.36))
            oval3.addCurve(to: CGPoint(x: 3.5, y: 15), controlPoint1: CGPoint(x: 0, y: 11.64), controlPoint2: CGPoint(x: 1.57, y: 15))
            oval3.close()
            context.saveGState()
            context.translateBy(x: 10, y: 0)
            oval3.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 0.021, brightness: 0.659, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 2
            let oval3Copy2 = UIBezierPath()
            oval3Copy2.move(to: CGPoint(x: 1.27, y: 13.86))
            oval3Copy2.addCurve(to: CGPoint(x: 1.55, y: 5.55), controlPoint1: CGPoint(x: -0.53, y: 13.1), controlPoint2: CGPoint(x: -0.4, y: 9.37))
            oval3Copy2.addCurve(to: CGPoint(x: 8.34, y: 0), controlPoint1: CGPoint(x: 3.51, y: 1.72), controlPoint2: CGPoint(x: 8.34, y: 0))
            oval3Copy2.addCurve(to: CGPoint(x: 8.05, y: 8.32), controlPoint1: CGPoint(x: 8.34, y: 0), controlPoint2: CGPoint(x: 10, y: 4.49))
            oval3Copy2.addCurve(to: CGPoint(x: 1.27, y: 13.86), controlPoint1: CGPoint(x: 6.1, y: 12.14), controlPoint2: CGPoint(x: 3.06, y: 14.63))
            oval3Copy2.close()
            context.saveGState()
            context.translateBy(x: 13, y: 3)
            oval3Copy2.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 0.011, brightness: 0.81, alpha: 1).setFill()
            oval3Copy2.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 5
            let oval3Copy5 = UIBezierPath()
            oval3Copy5.move(to: CGPoint(x: 7.73, y: 13.86))
            oval3Copy5.addCurve(to: CGPoint(x: 0.95, y: 8.32), controlPoint1: CGPoint(x: 5.94, y: 14.63), controlPoint2: CGPoint(x: 2.9, y: 12.14))
            oval3Copy5.addCurve(to: CGPoint(x: 0.66, y: 0), controlPoint1: CGPoint(x: -1, y: 4.49), controlPoint2: CGPoint(x: 0.66, y: 0))
            oval3Copy5.addCurve(to: CGPoint(x: 7.45, y: 5.55), controlPoint1: CGPoint(x: 0.66, y: 0), controlPoint2: CGPoint(x: 5.49, y: 1.72))
            oval3Copy5.addCurve(to: CGPoint(x: 7.73, y: 13.86), controlPoint1: CGPoint(x: 9.4, y: 9.37), controlPoint2: CGPoint(x: 9.53, y: 13.1))
            oval3Copy5.close()
            context.saveGState()
            context.translateBy(x: 5, y: 3)
            oval3Copy5.usesEvenOddFillRule = true
            UIColor(hue: 1, saturation: 0.011, brightness: 0.81, alpha: 1).setFill()
            oval3Copy5.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 3
            let oval3Copy3 = UIBezierPath()
            oval3Copy3.move(to: CGPoint(x: 0.3, y: 9.21))
            oval3Copy3.addCurve(to: CGPoint(x: 5.1, y: 1.87), controlPoint1: CGPoint(x: -0.83, y: 7.67), controlPoint2: CGPoint(x: 1.31, y: 4.39))
            oval3Copy3.addCurve(to: CGPoint(x: 14, y: 0.1), controlPoint1: CGPoint(x: 8.88, y: -0.64), controlPoint2: CGPoint(x: 14, y: 0.1))
            oval3Copy3.addCurve(to: CGPoint(x: 9.21, y: 7.45), controlPoint1: CGPoint(x: 14, y: 0.1), controlPoint2: CGPoint(x: 12.99, y: 4.93))
            oval3Copy3.addCurve(to: CGPoint(x: 0.3, y: 9.21), controlPoint1: CGPoint(x: 5.42, y: 9.96), controlPoint2: CGPoint(x: 1.44, y: 10.75))
            oval3Copy3.close()
            context.saveGState()
            context.translateBy(x: 13, y: 7)
            oval3Copy3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            oval3Copy3.fill()
            context.restoreGState()
            
            
            /// Oval 3 Copy 4
            let oval3Copy4 = UIBezierPath()
            oval3Copy4.move(to: CGPoint(x: 13.7, y: 9.21))
            oval3Copy4.addCurve(to: CGPoint(x: 4.79, y: 7.45), controlPoint1: CGPoint(x: 12.56, y: 10.75), controlPoint2: CGPoint(x: 8.58, y: 9.96))
            oval3Copy4.addCurve(to: CGPoint(x: 0, y: 0.1), controlPoint1: CGPoint(x: 1.01, y: 4.93), controlPoint2: CGPoint(x: 0, y: 0.1))
            oval3Copy4.addCurve(to: CGPoint(x: 8.9, y: 1.87), controlPoint1: CGPoint(x: 0, y: 0.1), controlPoint2: CGPoint(x: 5.12, y: -0.64))
            oval3Copy4.addCurve(to: CGPoint(x: 13.7, y: 9.21), controlPoint1: CGPoint(x: 12.69, y: 4.39), controlPoint2: CGPoint(x: 14.83, y: 7.67))
            oval3Copy4.close()
            context.saveGState()
            context.translateBy(x: 0, y: 7)
            oval3Copy4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            oval3Copy4.fill()
            context.restoreGState()
            
            
            /// Path 2
            let path2 = UIBezierPath()
            path2.move(to: CGPoint(x: 0, y: 1.29))
            path2.addLine(to: CGPoint(x: 4.76, y: 1.29))
            path2.addLine(to: CGPoint(x: 4.76, y: 0))
            path2.addLine(to: CGPoint(x: 0.45, y: 0))
            path2.addLine(to: CGPoint(x: 0, y: 1.29))
            path2.close()
            context.saveGState()
            context.translateBy(x: 11.27, y: 15.7)
            path2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            path2.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasegym(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 14)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 1, y: 0)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 27, height: 2))
            context.saveGState()
            context.translateBy(x: 0, y: 6)
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            
            /// Rectangle
            let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 14))
            context.saveGState()
            context.translateBy(x: 6, y: 0)
            UIColor.white.setFill()
            rectangle.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 14))
            context.saveGState()
            context.translateBy(x: 19, y: 0)
            UIColor.white.setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 12))
            context.saveGState()
            context.translateBy(x: 4, y: 1)
            UIColor.white.setFill()
            rectangleCopy.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 12))
            context.saveGState()
            context.translateBy(x: 21, y: 1)
            UIColor.white.setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 2
            let rectangleCopy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 10))
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            UIColor.white.setFill()
            rectangleCopy2.fill()
            context.restoreGState()
            
            
            /// Rectangle Copy 5
            let rectangleCopy5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 2, height: 10))
            context.saveGState()
            context.translateBy(x: 23, y: 2)
            UIColor.white.setFill()
            rectangleCopy5.fill()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnbasecrossfit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 28), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 28)
        
        /// CF
        let cF = NSMutableAttributedString(string: "CF")
        cF.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 21)!, range: NSRange(location: 0, length: cF.length))
        cF.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cF.length))
        context.saveGState()
        cF.draw(at: CGPoint.zero)
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnbaserunning(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 20)
        
        /// Page 1
        do {
            context.saveGState()
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 20))
            clip2.addLine(to: CGPoint(x: 0, y: 20))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.66))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 19.16), controlPoint1: CGPoint(x: 8.09, y: 19.64), controlPoint2: CGPoint(x: 8.55, y: 19.46))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.51))
            fill1.addCurve(to: CGPoint(x: 21.81, y: 7.23), controlPoint1: CGPoint(x: 22.05, y: 8.2), controlPoint2: CGPoint(x: 22.11, y: 7.62))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.64), controlPoint1: CGPoint(x: 16.02, y: -0.23), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.13))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.91), controlPoint1: CGPoint(x: 14.82, y: 3.44), controlPoint2: CGPoint(x: 14.67, y: 3.72))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.37), controlPoint1: CGPoint(x: 12.74, y: 5.3), controlPoint2: CGPoint(x: 12.46, y: 5.39))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.22))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.78), controlPoint1: CGPoint(x: 9.43, y: 5.19), controlPoint2: CGPoint(x: 9.06, y: 5.42))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.63))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.36))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.49), controlPoint1: CGPoint(x: 1.35, y: 17.39), controlPoint2: CGPoint(x: 1.31, y: 17.44))
            fill1.addLine(to: CGPoint(x: 0.13, y: 19.01))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 20), controlPoint1: CGPoint(x: -0.18, y: 19.43), controlPoint2: CGPoint(x: 0.12, y: 20.02))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.66))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIcnburgermenuclose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 10)
        
        /// Rectangle 3
        let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 10), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 8.24, y: 5.24)
        context.rotate(by: 405 * CGFloat.pi/180)
        context.translateBy(x: -1, y: -5)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle3.fill()
        context.restoreGState()
        
        /// Rectangle 3
        let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 2, height: 10), cornerRadius: 100)
        context.saveGState()
        context.translateBy(x: 8.24, y: 5.24)
        context.rotate(by: 315 * CGFloat.pi/180)
        context.translateBy(x: -1, y: -5)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle7.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnburgermenuopen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 10)
        
        /// burgermenu
        do {
            context.saveGState()
            
            /// Path 4
            let path4 = UIBezierPath()
            path4.move(to: CGPoint(x: 0, y: 1))
            path4.addLine(to: CGPoint(x: 15, y: 1))
            context.saveGState()
            path4.lineJoinStyle = .round
            path4.lineCapStyle = .round
            path4.lineWidth = 2
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setStroke()
            path4.stroke()
            context.restoreGState()
            
            
            /// Path 4 Copy
            let path4Copy = UIBezierPath()
            path4Copy.move(to: CGPoint(x: 0, y: 1))
            path4Copy.addLine(to: CGPoint(x: 15, y: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 4)
            path4Copy.lineJoinStyle = .round
            path4Copy.lineCapStyle = .round
            path4Copy.lineWidth = 2
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setStroke()
            path4Copy.stroke()
            context.restoreGState()
            
            
            /// Path 4 Copy 2
            let path4Copy2 = UIBezierPath()
            path4Copy2.move(to: CGPoint(x: 0, y: 1))
            path4Copy2.addLine(to: CGPoint(x: 15, y: 1))
            context.saveGState()
            context.translateBy(x: 0, y: 8)
            path4Copy2.lineJoinStyle = .round
            path4Copy2.lineCapStyle = .round
            path4Copy2.lineWidth = 2
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setStroke()
            path4Copy2.stroke()
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawBox_latestsessions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 282, height: 277), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 282, height: 277), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 282, y: resizedFrame.height / 277)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 282, height: 277))
        context.saveGState()
        UIColor.white.setFill()
        background.fill()
        context.saveGState()
        UIRectClip(background.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            background.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: background.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -282, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 282, y: -1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                background.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 52)
        UIColor.white.setFill()
        rectangle4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy
        let rectangle4Copy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 82)
        UIColor.white.setFill()
        rectangle4Copy.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 4
        let rectangle4Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 119)
        UIColor.white.setFill()
        rectangle4Copy4.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 7
        let rectangle4Copy7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 159)
        UIColor.white.setFill()
        rectangle4Copy7.fill()
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 149, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 52)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle7.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 2
        let rectangle4Copy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 105, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 82)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle4Copy2.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 5
        let rectangle4Copy5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 56, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 119)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle4Copy5.fill()
        context.restoreGState()
        
        /// Rectangle 4 Copy 6
        let rectangle4Copy6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 119)
        context.saveGState()
        UIRectClip(rectangle4Copy6.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle4Copy6.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle4Copy6.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle4Copy6.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle4Copy6.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 8
        let rectangle4Copy8 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 228, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 159)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        rectangle4Copy8.fill()
        context.restoreGState()
        
        /// Cardio
        let cardio = NSMutableAttributedString(string: "Cardio")
        cardio.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cardio.length))
        context.saveGState()
        cardio.draw(at: CGPoint(x: 8, y: 35))
        context.restoreGState()
        
        /// Strength
        let strength = NSMutableAttributedString(string: "Strength")
        strength.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: strength.length))
        context.saveGState()
        strength.draw(at: CGPoint(x: 8, y: 65))
        context.restoreGState()
        
        /// Mobility
        let mobility = NSMutableAttributedString(string: "Mobility")
        mobility.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: mobility.length))
        context.saveGState()
        mobility.draw(at: CGPoint(x: 8, y: 102))
        context.restoreGState()
        
        /// Intensity
        let intensity = NSMutableAttributedString(string: "Intensity")
        intensity.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: intensity.length))
        context.saveGState()
        intensity.draw(at: CGPoint(x: 8, y: 142))
        context.restoreGState()
        
        /// Rectangle 4
        let rectangle10 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 52)
        context.saveGState()
        UIRectClip(rectangle10.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle10.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle10.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle10.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle10.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 3
        let rectangle4Copy3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 82)
        context.saveGState()
        UIRectClip(rectangle4Copy3.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle4Copy3.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle4Copy3.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle4Copy3.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle4Copy3.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 4 Copy 9
        let rectangle4Copy9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 267, height: 5))
        context.saveGState()
        context.translateBy(x: 8, y: 159)
        context.saveGState()
        UIRectClip(rectangle4Copy9.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: rectangle4Copy9.bounds, auxiliaryInfo: nil)
        do {
            UIColor(white: 0.747, alpha: 1).setFill()
            rectangle4Copy9.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: rectangle4Copy9.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -267, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 267, y: 1)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                rectangle4Copy9.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// An high intensity se
        let anHighIntensitySe = NSMutableAttributedString(string: "An high intensity session mainly based on cardio\nJohn did a great job, needs motivation to push through when it gets tuff, I know he can do it, and so does he. Just make him push through :) ")
        anHighIntensitySe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: anHighIntensitySe.length))
        anHighIntensitySe.addAttribute(.foregroundColor, value: UIColor(white: 0.429, alpha: 1), range: NSRange(location: 0, length: anHighIntensitySe.length))
        context.saveGState()
        anHighIntensitySe.draw(in: CGRect(x: 10, y: 188, width: 265, height: 113))
        context.restoreGState()
        
        /// Latest Session
        let latestSession = NSMutableAttributedString(string: "Latest Session")
        latestSession.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 14)!, range: NSRange(location: 0, length: latestSession.length))
        context.saveGState()
        latestSession.draw(at: CGPoint(x: 8, y: 8))
        context.restoreGState()
        
        /// 2018-09-13
        let _20180913 = NSMutableAttributedString(string: "2018-09-13")
        _20180913.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _20180913.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .right
            _20180913.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _20180913.length))
        }
        context.saveGState()
        _20180913.draw(at: CGPoint(x: 214, y: 10))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCellsSlider(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 44)
        
        /// Cell
        let cell = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        cell.fill()
        context.saveGState()
        UIRectClip(cell.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: cell.bounds, auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.7, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            cell.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: cell.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -375, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 375, y: 0.5)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                cell.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        UIRectClip(cell.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.beginTransparencyLayer(in: cell.bounds, auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.7, saturation: 0.025, brightness: 0.8, alpha: 1).setFill()
            cell.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: cell.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -375, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 375, y: -0.5)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                cell.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// Track
        let track = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 343, height: 2), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: 16, y: 21)
        UIColor(white: 0.714, alpha: 1).setFill()
        track.fill()
        context.saveGState()
        track.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.056, saturation: 0.632, brightness: 0.957, alpha: 1).cgColor,
                    UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).cgColor,
                    UIColor(hue: 0.6, saturation: 0.084, brightness: 0.702, alpha: 1).cgColor,
                    UIColor(hue: 0.6, saturation: 0.084, brightness: 0.702, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 0.48, 0.51, 1])!,
            start: CGPoint(x: 8.02, y: 1),
            end: CGPoint(x: 343, y: 1),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Knob
        let knob = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 20.25, height: 20.25))
        context.saveGState()
        context.translateBy(x: 171.38, y: 10.88)
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -13, dy: -14))
        context.clip(using: .evenOdd)
        context.translateBy(x: -44.25, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 44.25, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.05).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -12, dy: -13))
        context.clip(using: .evenOdd)
        context.translateBy(x: -43.25, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 43.25, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.1).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -11, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -42.25, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 42.25, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.05).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            knob.fill()
            context.saveGState()
            knob.lineWidth = 1
            context.beginPath()
            context.addPath(knob.cgPath)
            context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            knob.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        knob.fill()
        context.saveGState()
        knob.lineWidth = 1
        context.beginPath()
        context.addPath(knob.cgPath)
        context.addRect(knob.bounds.insetBy(dx: -10, dy: -10))
        context.clip(using: .evenOdd)
        UIColor(white: 0, alpha: 0.1).setStroke()
        knob.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcn_circel_DEselected_bg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.setAlpha(0.3)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
            oval4.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcn_circel_selected_bg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBox_booking_userimg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 73, height: 73), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 73, height: 73), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 73, y: resizedFrame.height / 73)
        
        /// IMG_2974-1024x1024
        do {
            context.saveGState()
            
            /// Mask
            let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 73, height: 73))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(mask.cgPath)
            context.addRect(mask.bounds.insetBy(dx: -4, dy: -6))
            context.clip(using: .evenOdd)
            context.translateBy(x: -78, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 78, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            mask.fill()
            context.restoreGState()
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawBox_bookingrequested(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 316, height: 175), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 316, height: 175), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 316, y: resizedFrame.height / 175)
        
        /// box_booking_user-img
        // Warning: New symbols are not supported.
        
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: johnDoe.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            johnDoe.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: johnDoe.length))
        }
        context.saveGState()
        johnDoe.draw(in: CGRect(x: 11, y: 99, width: 90, height: 20))
        context.restoreGState()
        
        /// icn_crossfit-circel
        // Warning: New symbols are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 162, y: 140)
            
            /// Rectangle 8
            let rectangle8 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
            rectangle8.fill()
            context.restoreGState()
            
            
            /// Confirm booking
            let confirmBooking = NSMutableAttributedString(string: "Confirm booking")
            confirmBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: confirmBooking.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                confirmBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: confirmBooking.length))
            }
            confirmBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: confirmBooking.length))
            context.saveGState()
            confirmBooking.draw(in: CGRect(x: 27, y: 9, width: 100.49, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Group Copy
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 140)
            
            /// Rectangle 8
            let rectangle7 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 154, height: 34), cornerRadius: 100)
            context.saveGState()
            UIColor(hue: 1, saturation: 0.1, brightness: 0.14, alpha: 1).setFill()
            rectangle7.fill()
            context.restoreGState()
            
            
            /// Cancel booking
            let cancelBooking = NSMutableAttributedString(string: "Cancel booking")
            cancelBooking.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: cancelBooking.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                cancelBooking.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cancelBooking.length))
            }
            cancelBooking.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: cancelBooking.length))
            context.saveGState()
            cancelBooking.draw(in: CGRect(x: 32, y: 9, width: 89.28, height: 19))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// Let’s get some Cardi
        let letsGetSomeCardi = NSMutableAttributedString(string: "Let’s get some Cardio done!")
        letsGetSomeCardi.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 10)!, range: NSRange(location: 0, length: letsGetSomeCardi.length))
        context.saveGState()
        letsGetSomeCardi.draw(at: CGPoint(x: 134, y: 57))
        context.restoreGState()
        
        /// 13/9 10.00 am @frisk
        let _1391000AmFrisk = NSMutableAttributedString(string: "13/9 10.00 am\n@friskis och svettis Skanstull")
        _1391000AmFrisk.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: _1391000AmFrisk.length))
        _1391000AmFrisk.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.131, brightness: 0.106, alpha: 1), range: NSRange(location: 0, length: _1391000AmFrisk.length))
        context.saveGState()
        _1391000AmFrisk.draw(at: CGPoint(x: 134, y: 81))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingfightingcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/fighting
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingyogacircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/yoga
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntraininggymcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/gym
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingcrossfitcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// Oval 4
        let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icn/base/crossfit
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcntrainingrunningcircel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 31), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 31)
        
        /// icn_circel_bg
        // Warning: New symbols are not supported.
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 5, y: 5)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Button
        let button = NSMutableAttributedString(string: "Button")
        button.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: button.length))
        button.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: button.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            button.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: button.length))
        }
        button.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: button.length))
        context.saveGState()
        button.draw(in: CGRect(x: 18, y: 14, width: 260, height: 26))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 100)
        context.saveGState()
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Button
        let button = NSMutableAttributedString(string: "Button")
        button.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 17)!, range: NSRange(location: 0, length: button.length))
        button.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: button.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            button.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: button.length))
        }
        button.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: button.length))
        context.saveGState()
        button.draw(in: CGRect(x: 18, y: 14, width: 260, height: 26))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBtn_workoutgroups_selectable_selected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 98, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 98, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 13
        let rectangle2Copy13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 98, height: 44), cornerRadius: 58)
        context.saveGState()
        UIColor(hue: 0.655, saturation: 0.072, brightness: 0.163, alpha: 1).setFill()
        rectangle2Copy13.fill()
        context.restoreGState()
        
        /// Number
        let number = NSMutableAttributedString(string: "Number")
        number.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: number.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            number.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: number.length))
        }
        number.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: number.length))
        context.saveGState()
        number.draw(at: CGPoint(x: 16.5, y: 11))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawBtn_workoutgroups_selectable(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 98, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 98, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 13
        let rectangle2Copy13 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 98, height: 44), cornerRadius: 58)
        context.saveGState()
        UIColor(hue: 0.655, saturation: 0.081, brightness: 0.152, alpha: 1).setFill()
        rectangle2Copy13.fill()
        context.restoreGState()
        
        /// Number
        let number = NSMutableAttributedString(string: "Number")
        number.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 16)!, range: NSRange(location: 0, length: number.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            number.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: number.length))
        }
        number.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: number.length))
        context.saveGState()
        number.draw(at: CGPoint(x: 16.5, y: 11))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawInput_txtfield(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 310, height: 44), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 310, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 310, y: resizedFrame.height / 44)
        
        /// Rectangle 2 Copy 4
        let rectangle2Copy4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 310, height: 44))
        context.saveGState()
        UIColor.white.setFill()
        rectangle2Copy4.fill()
        context.saveGState()
        rectangle2Copy4.lineWidth = 1
        context.beginPath()
        context.addPath(rectangle2Copy4.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.667, saturation: 0.016, brightness: 0.749, alpha: 1).setStroke()
        rectangle2Copy4.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIco_staroutlined(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)
        
        /// Star
        let star = UIBezierPath()
        star.move(to: CGPoint(x: 6, y: 9))
        star.addLine(to: CGPoint(x: 2.47, y: 10.85))
        star.addLine(to: CGPoint(x: 3.15, y: 6.93))
        star.addLine(to: CGPoint(x: 0.29, y: 4.15))
        star.addLine(to: CGPoint(x: 4.24, y: 3.57))
        star.addLine(to: CGPoint(x: 6, y: 0))
        star.addLine(to: CGPoint(x: 7.76, y: 3.57))
        star.addLine(to: CGPoint(x: 11.71, y: 4.15))
        star.addLine(to: CGPoint(x: 8.85, y: 6.93))
        star.addLine(to: CGPoint(x: 9.53, y: 10.85))
        star.addLine(to: CGPoint(x: 6, y: 9))
        star.close()
        context.saveGState()
        context.saveGState()
        star.lineWidth = 1
        context.beginPath()
        context.addPath(star.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setStroke()
        star.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIco_starfilled(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)
        
        /// Star
        let star = UIBezierPath()
        star.move(to: CGPoint(x: 6, y: 9))
        star.addLine(to: CGPoint(x: 2.47, y: 10.85))
        star.addLine(to: CGPoint(x: 3.15, y: 6.93))
        star.addLine(to: CGPoint(x: 0.29, y: 4.15))
        star.addLine(to: CGPoint(x: 4.24, y: 3.57))
        star.addLine(to: CGPoint(x: 6, y: 0))
        star.addLine(to: CGPoint(x: 7.76, y: 3.57))
        star.addLine(to: CGPoint(x: 11.71, y: 4.15))
        star.addLine(to: CGPoint(x: 8.85, y: 6.93))
        star.addLine(to: CGPoint(x: 9.53, y: 10.85))
        star.addLine(to: CGPoint(x: 6, y: 9))
        star.close()
        context.saveGState()
        UIColor(hue: 0.614, saturation: 0.14, brightness: 0.234, alpha: 1).setFill()
        star.fill()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawProfile_mapview(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 120, height: 150), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 120, height: 150), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 120, y: resizedFrame.height / 150)
        
        /// img_profiles
        // Warning: New symbols are not supported.
        
        /// Name Lastname
        let nameLastname = NSMutableAttributedString(string: "Name Lastname")
        nameLastname.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 12)!, range: NSRange(location: 0, length: nameLastname.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            nameLastname.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: nameLastname.length))
        }
        context.saveGState()
        nameLastname.draw(in: CGRect(x: 6, y: 82, width: 109, height: 20))
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 18, y: 102)
            
            /// ico_star-filled
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 2
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 3
            // Warning: New symbols are not supported.
            
            
            /// ico_star-filled copy 4
            // Warning: New symbols are not supported.
            
            
            /// (3)
            let _3 = NSMutableAttributedString(string: "(3)")
            _3.addAttribute(.font, value: UIFont(name: ".AppleSystemUIFont", size: 8)!, range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(.foregroundColor, value: UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1), range: NSRange(location: 0, length: _3.length))
            context.saveGState()
            _3.draw(at: CGPoint(x: 75, y: 0))
            context.restoreGState()
            
            
            context.restoreGState()
        }
        
        /// 5,4
        let _54 = NSMutableAttributedString(string: "5,4")
        _54.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 20)!, range: NSRange(location: 0, length: _54.length))
        _54.addAttribute(.kern, value: -1.44, range: NSRange(location: 0, length: 2))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _54.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _54.length))
        }
        context.saveGState()
        _54.draw(at: CGPoint(x: 48, y: 117))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawImg_profiles(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 73, height: 73), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 73, height: 73), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 73, y: resizedFrame.height / 73)
        
        /// IMG_2974-1024x1024
        do {
            context.saveGState()
            
            /// Mask
            let mask = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 73, height: 73))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(mask.cgPath)
            context.addRect(mask.bounds.insetBy(dx: -4, dy: -6))
            context.clip(using: .evenOdd)
            context.translateBy(x: -78, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 78, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            mask.fill()
            context.restoreGState()
            context.saveGState()
            // Warning: Image fill is not supported.
            context.restoreGState()
            context.restoreGState()
            
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            // Empty.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    class func drawIco_swipe_up(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 19)
        
        /// Path 2
        let path2 = UIBezierPath()
        path2.move(to: CGPoint(x: 0, y: 9.96))
        path2.addLine(to: CGPoint(x: 8.63, y: 0))
        path2.addLine(to: CGPoint(x: 17, y: 9.66))
        context.saveGState()
        context.translateBy(x: 1, y: 3)
        path2.lineJoinStyle = .round
        path2.lineCapStyle = .round
        path2.lineWidth = 1
        UIColor.black.setStroke()
        path2.stroke()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_severalOptions(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// 3
        let _3 = NSMutableAttributedString(string: "3")
        _3.addAttribute(.font, value: UIFont(name: ".SFNSDisplay", size: 26)!, range: NSRange(location: 0, length: _3.length))
        _3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: _3.length))
        context.saveGState()
        _3.draw(at: CGPoint(x: 13, y: 0))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_crossfit(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/crossfit copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_yoga(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/yoga copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_gym(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/gym copy
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_fighting(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// icn/boxing
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_running_hoover(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 129, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 129, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 129, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle 5
        let rectangle5 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 96, height: 31))
        context.saveGState()
        context.translateBy(x: 20, y: 3)
        UIColor(hue: 0.617, saturation: 0.066, brightness: 0.592, alpha: 1).setFill()
        rectangle5.fill()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.056, saturation: 0.631, brightness: 0.957, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        /// icn/boxing copy
        // Warning: New symbols are not supported.
        
        /// icn/crossfit copy 2
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawIcnpintrainer_pin_running(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 63), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 63), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 63)
        
        /// Oval 3 Copy
        let oval3Copy = UIBezierPath()
        oval3Copy.move(to: CGPoint(x: 12, y: 9))
        oval3Copy.addCurve(to: CGPoint(x: 24, y: 2.79), controlPoint1: CGPoint(x: 20, y: 5.89), controlPoint2: CGPoint(x: 24, y: 3.81))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 24, y: 1.25), controlPoint2: CGPoint(x: 18.63, y: 0))
        oval3Copy.addCurve(to: CGPoint(x: 0, y: 2.79), controlPoint1: CGPoint(x: 5.37, y: 0), controlPoint2: CGPoint(x: 0, y: 1.25))
        oval3Copy.addCurve(to: CGPoint(x: 12, y: 9), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 4, y: 5.89))
        oval3Copy.close()
        context.saveGState()
        context.translateBy(x: 8, y: 51)
        // Warning: Blur effects are not supported.
        oval3Copy.usesEvenOddFillRule = true
        UIColor(hue: 0.644, saturation: 0.374, brightness: 0.24, alpha: 0.82).setFill()
        oval3Copy.fill()
        context.restoreGState()
        
        /// Oval 3 Copy
        let oval3Copy7 = UIBezierPath()
        oval3Copy7.move(to: CGPoint(x: 18.5, y: 59))
        oval3Copy7.addCurve(to: CGPoint(x: 37, y: 18.28), controlPoint1: CGPoint(x: 30.83, y: 38.58), controlPoint2: CGPoint(x: 37, y: 25.01))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 0), controlPoint1: CGPoint(x: 37, y: 8.18), controlPoint2: CGPoint(x: 28.72, y: 0))
        oval3Copy7.addCurve(to: CGPoint(x: 0, y: 18.28), controlPoint1: CGPoint(x: 8.28, y: 0), controlPoint2: CGPoint(x: 0, y: 8.18))
        oval3Copy7.addCurve(to: CGPoint(x: 18.5, y: 59), controlPoint1: CGPoint(x: 0, y: 25.01), controlPoint2: CGPoint(x: 6.17, y: 38.58))
        oval3Copy7.close()
        context.saveGState()
        context.translateBy(x: 2, y: 0)
        oval3Copy7.usesEvenOddFillRule = true
        context.saveGState()
        oval3Copy7.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.599, saturation: 0.086, brightness: 0.305, alpha: 1).cgColor,
                    UIColor(hue: 0.61, saturation: 0.047, brightness: 0.259, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 18.5, y: 0),
            end: CGPoint(x: 18.5, y: 56.99),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Oval 4 Copy
        let oval4Copy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 31, height: 31))
        context.saveGState()
        context.translateBy(x: 5, y: 3)
        UIColor(hue: 0.614, saturation: 0.067, brightness: 0.594, alpha: 1).setFill()
        oval4Copy.fill()
        context.restoreGState()
        
        /// Page 1
        do {
            context.saveGState()
            context.translateBy(x: 9, y: 7)
            
            /// Clip 2
            let clip2 = UIBezierPath()
            clip2.move(to: CGPoint.zero)
            clip2.addLine(to: CGPoint(x: 22, y: 0))
            clip2.addLine(to: CGPoint(x: 22, y: 19.64))
            clip2.addLine(to: CGPoint(x: 0, y: 19.64))
            clip2.addLine(to: CGPoint.zero)
            clip2.close()
            
            
            /// Clip 2 (Outline Mask)
            context.saveGState()
            clip2.addClip()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 7.61, y: 19.31))
            fill1.addCurve(to: CGPoint(x: 8.93, y: 18.81), controlPoint1: CGPoint(x: 8.09, y: 19.29), controlPoint2: CGPoint(x: 8.55, y: 19.11))
            fill1.addLine(to: CGPoint(x: 21.66, y: 8.36))
            fill1.addCurve(to: CGPoint(x: 21.8, y: 7.1), controlPoint1: CGPoint(x: 22.05, y: 8.05), controlPoint2: CGPoint(x: 22.11, y: 7.49))
            fill1.addLine(to: CGPoint(x: 16.41, y: 0.27))
            fill1.addCurve(to: CGPoint(x: 15.15, y: 0.63), controlPoint1: CGPoint(x: 16.02, y: -0.22), controlPoint2: CGPoint(x: 15.23, y: 0))
            fill1.addLine(to: CGPoint(x: 14.86, y: 3.07))
            fill1.addCurve(to: CGPoint(x: 14.43, y: 3.84), controlPoint1: CGPoint(x: 14.82, y: 3.38), controlPoint2: CGPoint(x: 14.67, y: 3.65))
            fill1.addLine(to: CGPoint(x: 12.96, y: 5.02))
            fill1.addCurve(to: CGPoint(x: 12.17, y: 5.27), controlPoint1: CGPoint(x: 12.74, y: 5.2), controlPoint2: CGPoint(x: 12.45, y: 5.29))
            fill1.addLine(to: CGPoint(x: 9.82, y: 5.12))
            fill1.addCurve(to: CGPoint(x: 8.89, y: 5.68), controlPoint1: CGPoint(x: 9.43, y: 5.1), controlPoint2: CGPoint(x: 9.06, y: 5.32))
            fill1.addLine(to: CGPoint(x: 6.04, y: 12.4))
            fill1.addLine(to: CGPoint(x: 1.4, y: 17.04))
            fill1.addCurve(to: CGPoint(x: 1.27, y: 17.18), controlPoint1: CGPoint(x: 1.35, y: 17.08), controlPoint2: CGPoint(x: 1.31, y: 17.12))
            fill1.addLine(to: CGPoint(x: 0.13, y: 18.67))
            fill1.addCurve(to: CGPoint(x: 0.62, y: 19.64), controlPoint1: CGPoint(x: -0.18, y: 19.08), controlPoint2: CGPoint(x: 0.12, y: 19.66))
            fill1.addLine(to: CGPoint(x: 7.61, y: 19.31))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor.white.setFill()
            fill1.fill()
            context.restoreGState()
            
            
            context.restoreGState()
            // End Clip 2 (Outline Mask)
            
            context.restoreGState()
        }
        
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfPeppAppSignInPage() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawPeppAppSignInPage()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainerCalender() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawTrainerCalender()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainerProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawTrainerProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegisterAsTrainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawRegisterAsTrainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCheckInTrainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawCheckInTrainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCheckInUser() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawCheckInUser()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSummarizeTraining_Trainer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawSummarizeTraining_Trainer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRateTrainingClient() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawRateTrainingClient()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTrainingRequested() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawTrainingRequested()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBooking() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawBooking()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFindTrainingUser() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawFindTrainingUser()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMenuOpen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawMenuOpen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClientTrainingJournal() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawClientTrainingJournal()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUserProfile2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 813), false, 0)
        StyleKit.drawUserProfile2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUserProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawUserProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRegisterUser() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        StyleKit.drawRegisterUser()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfCalendermonth() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 336, height: 290), false, 0)
        StyleKit.drawCalendermonth()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderdaybooked() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderdaybooked()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderdaybookableCopy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderdaybookableCopy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderdaybookable() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderdaybookable()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCalenderday() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
        StyleKit.drawCalenderday()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsocialmediafacebook() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
        StyleKit.drawIcnsocialmediafacebook()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsocialmediatwitter() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 15), false, 0)
        StyleKit.drawIcnsocialmediatwitter()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnsocialmediainstagram() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
        StyleKit.drawIcnsocialmediainstagram()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasefighting() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 15), false, 0)
        StyleKit.drawIcnbasefighting()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbaseyoga() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 17), false, 0)
        StyleKit.drawIcnbaseyoga()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasegym() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 14), false, 0)
        StyleKit.drawIcnbasegym()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbasecrossfit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 28), false, 0)
        StyleKit.drawIcnbasecrossfit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnbaserunning() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 20), false, 0)
        StyleKit.drawIcnbaserunning()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnburgermenuclose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 10), false, 0)
        StyleKit.drawIcnburgermenuclose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnburgermenuopen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 10), false, 0)
        StyleKit.drawIcnburgermenuopen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_latestsessions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 282, height: 277), false, 0)
        StyleKit.drawBox_latestsessions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCellsSlider() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 44), false, 0)
        StyleKit.drawCellsSlider()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcn_circel_DEselected_bg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcn_circel_DEselected_bg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcn_circel_selected_bg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcn_circel_selected_bg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_booking_userimg() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 73), false, 0)
        StyleKit.drawBox_booking_userimg()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBox_bookingrequested() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 316, height: 175), false, 0)
        StyleKit.drawBox_bookingrequested()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingfightingcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingfightingcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingyogacircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingyogacircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntraininggymcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntraininggymcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingcrossfitcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingcrossfitcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcntrainingrunningcircel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 31, height: 31), false, 0)
        StyleKit.drawIcntrainingrunningcircel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        StyleKit.drawMiscBigButton2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        StyleKit.drawMiscBigButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBtn_workoutgroups_selectable_selected() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 98, height: 44), false, 0)
        StyleKit.drawBtn_workoutgroups_selectable_selected()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBtn_workoutgroups_selectable() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 98, height: 44), false, 0)
        StyleKit.drawBtn_workoutgroups_selectable()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfInput_txtfield() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 310, height: 44), false, 0)
        StyleKit.drawInput_txtfield()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIco_staroutlined() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
        StyleKit.drawIco_staroutlined()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIco_starfilled() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 12), false, 0)
        StyleKit.drawIco_starfilled()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProfile_mapview() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 120, height: 150), false, 0)
        StyleKit.drawProfile_mapview()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfImg_profiles() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 73, height: 73), false, 0)
        StyleKit.drawImg_profiles()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIco_swipe_up() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 19), false, 0)
        StyleKit.drawIco_swipe_up()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_severalOptions() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_severalOptions()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_crossfit() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_crossfit()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_yoga() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_yoga()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_gym() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_gym()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_fighting() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_fighting()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_running_hoover() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 129, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_running_hoover()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIcnpintrainer_pin_running() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 63), false, 0)
        StyleKit.drawIcnpintrainer_pin_running()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
